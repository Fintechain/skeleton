// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/fintechain/skeleton/internal/domain/component"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFactory creates a new instance of MockFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFactory {
	mock := &MockFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFactory is an autogenerated mock type for the Factory type
type MockFactory struct {
	mock.Mock
}

type MockFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFactory) EXPECT() *MockFactory_Expecter {
	return &MockFactory_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockFactory
func (_mock *MockFactory) Create(config component.ComponentConfig) (component.Component, error) {
	ret := _mock.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 component.Component
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(component.ComponentConfig) (component.Component, error)); ok {
		return returnFunc(config)
	}
	if returnFunc, ok := ret.Get(0).(func(component.ComponentConfig) component.Component); ok {
		r0 = returnFunc(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(component.Component)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(component.ComponentConfig) error); ok {
		r1 = returnFunc(config)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFactory_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFactory_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - config component.ComponentConfig
func (_e *MockFactory_Expecter) Create(config interface{}) *MockFactory_Create_Call {
	return &MockFactory_Create_Call{Call: _e.mock.On("Create", config)}
}

func (_c *MockFactory_Create_Call) Run(run func(config component.ComponentConfig)) *MockFactory_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 component.ComponentConfig
		if args[0] != nil {
			arg0 = args[0].(component.ComponentConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFactory_Create_Call) Return(component1 component.Component, err error) *MockFactory_Create_Call {
	_c.Call.Return(component1, err)
	return _c
}

func (_c *MockFactory_Create_Call) RunAndReturn(run func(config component.ComponentConfig) (component.Component, error)) *MockFactory_Create_Call {
	_c.Call.Return(run)
	return _c
}
