// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/fintechain/skeleton/internal/domain/storage"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTransactional creates a new instance of MockTransactional. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactional(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactional {
	mock := &MockTransactional{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransactional is an autogenerated mock type for the Transactional type
type MockTransactional struct {
	mock.Mock
}

type MockTransactional_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactional) EXPECT() *MockTransactional_Expecter {
	return &MockTransactional_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function for the type MockTransactional
func (_mock *MockTransactional) BeginTx() (storage.Transaction, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 storage.Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (storage.Transaction, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() storage.Transaction); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactional_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type MockTransactional_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
func (_e *MockTransactional_Expecter) BeginTx() *MockTransactional_BeginTx_Call {
	return &MockTransactional_BeginTx_Call{Call: _e.mock.On("BeginTx")}
}

func (_c *MockTransactional_BeginTx_Call) Run(run func()) *MockTransactional_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactional_BeginTx_Call) Return(transaction storage.Transaction, err error) *MockTransactional_BeginTx_Call {
	_c.Call.Return(transaction, err)
	return _c
}

func (_c *MockTransactional_BeginTx_Call) RunAndReturn(run func() (storage.Transaction, error)) *MockTransactional_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// SupportsTransactions provides a mock function for the type MockTransactional
func (_mock *MockTransactional) SupportsTransactions() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SupportsTransactions")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockTransactional_SupportsTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SupportsTransactions'
type MockTransactional_SupportsTransactions_Call struct {
	*mock.Call
}

// SupportsTransactions is a helper method to define mock.On call
func (_e *MockTransactional_Expecter) SupportsTransactions() *MockTransactional_SupportsTransactions_Call {
	return &MockTransactional_SupportsTransactions_Call{Call: _e.mock.On("SupportsTransactions")}
}

func (_c *MockTransactional_SupportsTransactions_Call) Run(run func()) *MockTransactional_SupportsTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactional_SupportsTransactions_Call) Return(b bool) *MockTransactional_SupportsTransactions_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockTransactional_SupportsTransactions_Call) RunAndReturn(run func() bool) *MockTransactional_SupportsTransactions_Call {
	_c.Call.Return(run)
	return _c
}
