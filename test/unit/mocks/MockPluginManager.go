// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/fintechain/skeleton/internal/domain/component"
	"github.com/fintechain/skeleton/internal/domain/context"
	"github.com/fintechain/skeleton/internal/domain/plugin"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPluginManager creates a new instance of MockPluginManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPluginManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPluginManager {
	mock := &MockPluginManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPluginManager is an autogenerated mock type for the PluginManager type
type MockPluginManager struct {
	mock.Mock
}

type MockPluginManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPluginManager) EXPECT() *MockPluginManager_Expecter {
	return &MockPluginManager_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) Add(pluginID component.ComponentID, plugin1 plugin.Plugin) error {
	ret := _mock.Called(pluginID, plugin1)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(component.ComponentID, plugin.Plugin) error); ok {
		r0 = returnFunc(pluginID, plugin1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPluginManager_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockPluginManager_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - pluginID component.ComponentID
//   - plugin1 plugin.Plugin
func (_e *MockPluginManager_Expecter) Add(pluginID interface{}, plugin1 interface{}) *MockPluginManager_Add_Call {
	return &MockPluginManager_Add_Call{Call: _e.mock.On("Add", pluginID, plugin1)}
}

func (_c *MockPluginManager_Add_Call) Run(run func(pluginID component.ComponentID, plugin1 plugin.Plugin)) *MockPluginManager_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 component.ComponentID
		if args[0] != nil {
			arg0 = args[0].(component.ComponentID)
		}
		var arg1 plugin.Plugin
		if args[1] != nil {
			arg1 = args[1].(plugin.Plugin)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPluginManager_Add_Call) Return(err error) *MockPluginManager_Add_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPluginManager_Add_Call) RunAndReturn(run func(pluginID component.ComponentID, plugin1 plugin.Plugin) error) *MockPluginManager_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Description provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) Description() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Description")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPluginManager_Description_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Description'
type MockPluginManager_Description_Call struct {
	*mock.Call
}

// Description is a helper method to define mock.On call
func (_e *MockPluginManager_Expecter) Description() *MockPluginManager_Description_Call {
	return &MockPluginManager_Description_Call{Call: _e.mock.On("Description")}
}

func (_c *MockPluginManager_Description_Call) Run(run func()) *MockPluginManager_Description_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPluginManager_Description_Call) Return(s string) *MockPluginManager_Description_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPluginManager_Description_Call) RunAndReturn(run func() string) *MockPluginManager_Description_Call {
	_c.Call.Return(run)
	return _c
}

// Dispose provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) Dispose() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dispose")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPluginManager_Dispose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dispose'
type MockPluginManager_Dispose_Call struct {
	*mock.Call
}

// Dispose is a helper method to define mock.On call
func (_e *MockPluginManager_Expecter) Dispose() *MockPluginManager_Dispose_Call {
	return &MockPluginManager_Dispose_Call{Call: _e.mock.On("Dispose")}
}

func (_c *MockPluginManager_Dispose_Call) Run(run func()) *MockPluginManager_Dispose_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPluginManager_Dispose_Call) Return(err error) *MockPluginManager_Dispose_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPluginManager_Dispose_Call) RunAndReturn(run func() error) *MockPluginManager_Dispose_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlugin provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) GetPlugin(pluginID component.ComponentID) (plugin.Plugin, error) {
	ret := _mock.Called(pluginID)

	if len(ret) == 0 {
		panic("no return value specified for GetPlugin")
	}

	var r0 plugin.Plugin
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(component.ComponentID) (plugin.Plugin, error)); ok {
		return returnFunc(pluginID)
	}
	if returnFunc, ok := ret.Get(0).(func(component.ComponentID) plugin.Plugin); ok {
		r0 = returnFunc(pluginID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugin.Plugin)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(component.ComponentID) error); ok {
		r1 = returnFunc(pluginID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPluginManager_GetPlugin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlugin'
type MockPluginManager_GetPlugin_Call struct {
	*mock.Call
}

// GetPlugin is a helper method to define mock.On call
//   - pluginID component.ComponentID
func (_e *MockPluginManager_Expecter) GetPlugin(pluginID interface{}) *MockPluginManager_GetPlugin_Call {
	return &MockPluginManager_GetPlugin_Call{Call: _e.mock.On("GetPlugin", pluginID)}
}

func (_c *MockPluginManager_GetPlugin_Call) Run(run func(pluginID component.ComponentID)) *MockPluginManager_GetPlugin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 component.ComponentID
		if args[0] != nil {
			arg0 = args[0].(component.ComponentID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPluginManager_GetPlugin_Call) Return(plugin1 plugin.Plugin, err error) *MockPluginManager_GetPlugin_Call {
	_c.Call.Return(plugin1, err)
	return _c
}

func (_c *MockPluginManager_GetPlugin_Call) RunAndReturn(run func(pluginID component.ComponentID) (plugin.Plugin, error)) *MockPluginManager_GetPlugin_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) ID() component.ComponentID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 component.ComponentID
	if returnFunc, ok := ret.Get(0).(func() component.ComponentID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(component.ComponentID)
	}
	return r0
}

// MockPluginManager_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockPluginManager_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockPluginManager_Expecter) ID() *MockPluginManager_ID_Call {
	return &MockPluginManager_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockPluginManager_ID_Call) Run(run func()) *MockPluginManager_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPluginManager_ID_Call) Return(componentID component.ComponentID) *MockPluginManager_ID_Call {
	_c.Call.Return(componentID)
	return _c
}

func (_c *MockPluginManager_ID_Call) RunAndReturn(run func() component.ComponentID) *MockPluginManager_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) Initialize(ctx context.Context, system component.System) error {
	ret := _mock.Called(ctx, system)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, component.System) error); ok {
		r0 = returnFunc(ctx, system)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPluginManager_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockPluginManager_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - ctx context.Context
//   - system component.System
func (_e *MockPluginManager_Expecter) Initialize(ctx interface{}, system interface{}) *MockPluginManager_Initialize_Call {
	return &MockPluginManager_Initialize_Call{Call: _e.mock.On("Initialize", ctx, system)}
}

func (_c *MockPluginManager_Initialize_Call) Run(run func(ctx context.Context, system component.System)) *MockPluginManager_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 component.System
		if args[1] != nil {
			arg1 = args[1].(component.System)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPluginManager_Initialize_Call) Return(err error) *MockPluginManager_Initialize_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPluginManager_Initialize_Call) RunAndReturn(run func(ctx context.Context, system component.System) error) *MockPluginManager_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// IsRunning provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) IsRunning() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockPluginManager_IsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRunning'
type MockPluginManager_IsRunning_Call struct {
	*mock.Call
}

// IsRunning is a helper method to define mock.On call
func (_e *MockPluginManager_Expecter) IsRunning() *MockPluginManager_IsRunning_Call {
	return &MockPluginManager_IsRunning_Call{Call: _e.mock.On("IsRunning")}
}

func (_c *MockPluginManager_IsRunning_Call) Run(run func()) *MockPluginManager_IsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPluginManager_IsRunning_Call) Return(b bool) *MockPluginManager_IsRunning_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockPluginManager_IsRunning_Call) RunAndReturn(run func() bool) *MockPluginManager_IsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// ListPlugins provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) ListPlugins() []component.ComponentID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListPlugins")
	}

	var r0 []component.ComponentID
	if returnFunc, ok := ret.Get(0).(func() []component.ComponentID); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]component.ComponentID)
		}
	}
	return r0
}

// MockPluginManager_ListPlugins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPlugins'
type MockPluginManager_ListPlugins_Call struct {
	*mock.Call
}

// ListPlugins is a helper method to define mock.On call
func (_e *MockPluginManager_Expecter) ListPlugins() *MockPluginManager_ListPlugins_Call {
	return &MockPluginManager_ListPlugins_Call{Call: _e.mock.On("ListPlugins")}
}

func (_c *MockPluginManager_ListPlugins_Call) Run(run func()) *MockPluginManager_ListPlugins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPluginManager_ListPlugins_Call) Return(componentIDs []component.ComponentID) *MockPluginManager_ListPlugins_Call {
	_c.Call.Return(componentIDs)
	return _c
}

func (_c *MockPluginManager_ListPlugins_Call) RunAndReturn(run func() []component.ComponentID) *MockPluginManager_ListPlugins_Call {
	_c.Call.Return(run)
	return _c
}

// Metadata provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) Metadata() component.Metadata {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Metadata")
	}

	var r0 component.Metadata
	if returnFunc, ok := ret.Get(0).(func() component.Metadata); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(component.Metadata)
		}
	}
	return r0
}

// MockPluginManager_Metadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Metadata'
type MockPluginManager_Metadata_Call struct {
	*mock.Call
}

// Metadata is a helper method to define mock.On call
func (_e *MockPluginManager_Expecter) Metadata() *MockPluginManager_Metadata_Call {
	return &MockPluginManager_Metadata_Call{Call: _e.mock.On("Metadata")}
}

func (_c *MockPluginManager_Metadata_Call) Run(run func()) *MockPluginManager_Metadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPluginManager_Metadata_Call) Return(metadata component.Metadata) *MockPluginManager_Metadata_Call {
	_c.Call.Return(metadata)
	return _c
}

func (_c *MockPluginManager_Metadata_Call) RunAndReturn(run func() component.Metadata) *MockPluginManager_Metadata_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPluginManager_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockPluginManager_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockPluginManager_Expecter) Name() *MockPluginManager_Name_Call {
	return &MockPluginManager_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockPluginManager_Name_Call) Run(run func()) *MockPluginManager_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPluginManager_Name_Call) Return(s string) *MockPluginManager_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPluginManager_Name_Call) RunAndReturn(run func() string) *MockPluginManager_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) Remove(pluginID component.ComponentID) error {
	ret := _mock.Called(pluginID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(component.ComponentID) error); ok {
		r0 = returnFunc(pluginID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPluginManager_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockPluginManager_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - pluginID component.ComponentID
func (_e *MockPluginManager_Expecter) Remove(pluginID interface{}) *MockPluginManager_Remove_Call {
	return &MockPluginManager_Remove_Call{Call: _e.mock.On("Remove", pluginID)}
}

func (_c *MockPluginManager_Remove_Call) Run(run func(pluginID component.ComponentID)) *MockPluginManager_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 component.ComponentID
		if args[0] != nil {
			arg0 = args[0].(component.ComponentID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPluginManager_Remove_Call) Return(err error) *MockPluginManager_Remove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPluginManager_Remove_Call) RunAndReturn(run func(pluginID component.ComponentID) error) *MockPluginManager_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) Start(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPluginManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockPluginManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPluginManager_Expecter) Start(ctx interface{}) *MockPluginManager_Start_Call {
	return &MockPluginManager_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockPluginManager_Start_Call) Run(run func(ctx context.Context)) *MockPluginManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPluginManager_Start_Call) Return(err error) *MockPluginManager_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPluginManager_Start_Call) RunAndReturn(run func(ctx context.Context) error) *MockPluginManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// StartPlugin provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) StartPlugin(ctx context.Context, pluginID component.ComponentID) error {
	ret := _mock.Called(ctx, pluginID)

	if len(ret) == 0 {
		panic("no return value specified for StartPlugin")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, component.ComponentID) error); ok {
		r0 = returnFunc(ctx, pluginID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPluginManager_StartPlugin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartPlugin'
type MockPluginManager_StartPlugin_Call struct {
	*mock.Call
}

// StartPlugin is a helper method to define mock.On call
//   - ctx context.Context
//   - pluginID component.ComponentID
func (_e *MockPluginManager_Expecter) StartPlugin(ctx interface{}, pluginID interface{}) *MockPluginManager_StartPlugin_Call {
	return &MockPluginManager_StartPlugin_Call{Call: _e.mock.On("StartPlugin", ctx, pluginID)}
}

func (_c *MockPluginManager_StartPlugin_Call) Run(run func(ctx context.Context, pluginID component.ComponentID)) *MockPluginManager_StartPlugin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 component.ComponentID
		if args[1] != nil {
			arg1 = args[1].(component.ComponentID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPluginManager_StartPlugin_Call) Return(err error) *MockPluginManager_StartPlugin_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPluginManager_StartPlugin_Call) RunAndReturn(run func(ctx context.Context, pluginID component.ComponentID) error) *MockPluginManager_StartPlugin_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) Status() component.ServiceStatus {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 component.ServiceStatus
	if returnFunc, ok := ret.Get(0).(func() component.ServiceStatus); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(component.ServiceStatus)
	}
	return r0
}

// MockPluginManager_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockPluginManager_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *MockPluginManager_Expecter) Status() *MockPluginManager_Status_Call {
	return &MockPluginManager_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *MockPluginManager_Status_Call) Run(run func()) *MockPluginManager_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPluginManager_Status_Call) Return(serviceStatus component.ServiceStatus) *MockPluginManager_Status_Call {
	_c.Call.Return(serviceStatus)
	return _c
}

func (_c *MockPluginManager_Status_Call) RunAndReturn(run func() component.ServiceStatus) *MockPluginManager_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) Stop(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPluginManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockPluginManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPluginManager_Expecter) Stop(ctx interface{}) *MockPluginManager_Stop_Call {
	return &MockPluginManager_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *MockPluginManager_Stop_Call) Run(run func(ctx context.Context)) *MockPluginManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPluginManager_Stop_Call) Return(err error) *MockPluginManager_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPluginManager_Stop_Call) RunAndReturn(run func(ctx context.Context) error) *MockPluginManager_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// StopPlugin provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) StopPlugin(ctx context.Context, pluginID component.ComponentID) error {
	ret := _mock.Called(ctx, pluginID)

	if len(ret) == 0 {
		panic("no return value specified for StopPlugin")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, component.ComponentID) error); ok {
		r0 = returnFunc(ctx, pluginID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPluginManager_StopPlugin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopPlugin'
type MockPluginManager_StopPlugin_Call struct {
	*mock.Call
}

// StopPlugin is a helper method to define mock.On call
//   - ctx context.Context
//   - pluginID component.ComponentID
func (_e *MockPluginManager_Expecter) StopPlugin(ctx interface{}, pluginID interface{}) *MockPluginManager_StopPlugin_Call {
	return &MockPluginManager_StopPlugin_Call{Call: _e.mock.On("StopPlugin", ctx, pluginID)}
}

func (_c *MockPluginManager_StopPlugin_Call) Run(run func(ctx context.Context, pluginID component.ComponentID)) *MockPluginManager_StopPlugin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 component.ComponentID
		if args[1] != nil {
			arg1 = args[1].(component.ComponentID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPluginManager_StopPlugin_Call) Return(err error) *MockPluginManager_StopPlugin_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPluginManager_StopPlugin_Call) RunAndReturn(run func(ctx context.Context, pluginID component.ComponentID) error) *MockPluginManager_StopPlugin_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) Type() component.ComponentType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 component.ComponentType
	if returnFunc, ok := ret.Get(0).(func() component.ComponentType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(component.ComponentType)
	}
	return r0
}

// MockPluginManager_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockPluginManager_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockPluginManager_Expecter) Type() *MockPluginManager_Type_Call {
	return &MockPluginManager_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockPluginManager_Type_Call) Run(run func()) *MockPluginManager_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPluginManager_Type_Call) Return(componentType component.ComponentType) *MockPluginManager_Type_Call {
	_c.Call.Return(componentType)
	return _c
}

func (_c *MockPluginManager_Type_Call) RunAndReturn(run func() component.ComponentType) *MockPluginManager_Type_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function for the type MockPluginManager
func (_mock *MockPluginManager) Version() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPluginManager_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockPluginManager_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *MockPluginManager_Expecter) Version() *MockPluginManager_Version_Call {
	return &MockPluginManager_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *MockPluginManager_Version_Call) Run(run func()) *MockPluginManager_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPluginManager_Version_Call) Return(s string) *MockPluginManager_Version_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPluginManager_Version_Call) RunAndReturn(run func() string) *MockPluginManager_Version_Call {
	_c.Call.Return(run)
	return _c
}
