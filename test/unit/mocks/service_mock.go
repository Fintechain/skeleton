// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	component "github.com/fintechain/skeleton/internal/domain/component"
	context "github.com/fintechain/skeleton/internal/domain/context"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Description provides a mock function with no fields
func (_m *MockService) Description() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Description")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_Description_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Description'
type MockService_Description_Call struct {
	*mock.Call
}

// Description is a helper method to define mock.On call
func (_e *MockService_Expecter) Description() *MockService_Description_Call {
	return &MockService_Description_Call{Call: _e.mock.On("Description")}
}

func (_c *MockService_Description_Call) Run(run func()) *MockService_Description_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Description_Call) Return(_a0 string) *MockService_Description_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Description_Call) RunAndReturn(run func() string) *MockService_Description_Call {
	_c.Call.Return(run)
	return _c
}

// Dispose provides a mock function with no fields
func (_m *MockService) Dispose() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dispose")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Dispose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dispose'
type MockService_Dispose_Call struct {
	*mock.Call
}

// Dispose is a helper method to define mock.On call
func (_e *MockService_Expecter) Dispose() *MockService_Dispose_Call {
	return &MockService_Dispose_Call{Call: _e.mock.On("Dispose")}
}

func (_c *MockService_Dispose_Call) Run(run func()) *MockService_Dispose_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Dispose_Call) Return(_a0 error) *MockService_Dispose_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Dispose_Call) RunAndReturn(run func() error) *MockService_Dispose_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *MockService) ID() component.ComponentID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 component.ComponentID
	if rf, ok := ret.Get(0).(func() component.ComponentID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(component.ComponentID)
	}

	return r0
}

// MockService_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockService_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockService_Expecter) ID() *MockService_ID_Call {
	return &MockService_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockService_ID_Call) Run(run func()) *MockService_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_ID_Call) Return(_a0 component.ComponentID) *MockService_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_ID_Call) RunAndReturn(run func() component.ComponentID) *MockService_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with given fields: ctx, system
func (_m *MockService) Initialize(ctx context.Context, system component.System) error {
	ret := _m.Called(ctx, system)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, component.System) error); ok {
		r0 = rf(ctx, system)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockService_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - ctx context.Context
//   - system component.System
func (_e *MockService_Expecter) Initialize(ctx interface{}, system interface{}) *MockService_Initialize_Call {
	return &MockService_Initialize_Call{Call: _e.mock.On("Initialize", ctx, system)}
}

func (_c *MockService_Initialize_Call) Run(run func(ctx context.Context, system component.System)) *MockService_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(component.System))
	})
	return _c
}

func (_c *MockService_Initialize_Call) Return(_a0 error) *MockService_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Initialize_Call) RunAndReturn(run func(context.Context, component.System) error) *MockService_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// IsRunning provides a mock function with no fields
func (_m *MockService) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockService_IsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRunning'
type MockService_IsRunning_Call struct {
	*mock.Call
}

// IsRunning is a helper method to define mock.On call
func (_e *MockService_Expecter) IsRunning() *MockService_IsRunning_Call {
	return &MockService_IsRunning_Call{Call: _e.mock.On("IsRunning")}
}

func (_c *MockService_IsRunning_Call) Run(run func()) *MockService_IsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_IsRunning_Call) Return(_a0 bool) *MockService_IsRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_IsRunning_Call) RunAndReturn(run func() bool) *MockService_IsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// Metadata provides a mock function with no fields
func (_m *MockService) Metadata() component.Metadata {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Metadata")
	}

	var r0 component.Metadata
	if rf, ok := ret.Get(0).(func() component.Metadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(component.Metadata)
		}
	}

	return r0
}

// MockService_Metadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Metadata'
type MockService_Metadata_Call struct {
	*mock.Call
}

// Metadata is a helper method to define mock.On call
func (_e *MockService_Expecter) Metadata() *MockService_Metadata_Call {
	return &MockService_Metadata_Call{Call: _e.mock.On("Metadata")}
}

func (_c *MockService_Metadata_Call) Run(run func()) *MockService_Metadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Metadata_Call) Return(_a0 component.Metadata) *MockService_Metadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Metadata_Call) RunAndReturn(run func() component.Metadata) *MockService_Metadata_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockService) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockService_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockService_Expecter) Name() *MockService_Name_Call {
	return &MockService_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockService_Name_Call) Run(run func()) *MockService_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Name_Call) Return(_a0 string) *MockService_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Name_Call) RunAndReturn(run func() string) *MockService_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockService) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockService_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) Start(ctx interface{}) *MockService_Start_Call {
	return &MockService_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockService_Start_Call) Run(run func(ctx context.Context)) *MockService_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_Start_Call) Return(_a0 error) *MockService_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Start_Call) RunAndReturn(run func(context.Context) error) *MockService_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with no fields
func (_m *MockService) Status() component.ServiceStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 component.ServiceStatus
	if rf, ok := ret.Get(0).(func() component.ServiceStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(component.ServiceStatus)
	}

	return r0
}

// MockService_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockService_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *MockService_Expecter) Status() *MockService_Status_Call {
	return &MockService_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *MockService_Status_Call) Run(run func()) *MockService_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Status_Call) Return(_a0 component.ServiceStatus) *MockService_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Status_Call) RunAndReturn(run func() component.ServiceStatus) *MockService_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx
func (_m *MockService) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockService_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) Stop(ctx interface{}) *MockService_Stop_Call {
	return &MockService_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *MockService_Stop_Call) Run(run func(ctx context.Context)) *MockService_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_Stop_Call) Return(_a0 error) *MockService_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Stop_Call) RunAndReturn(run func(context.Context) error) *MockService_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with no fields
func (_m *MockService) Type() component.ComponentType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 component.ComponentType
	if rf, ok := ret.Get(0).(func() component.ComponentType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(component.ComponentType)
	}

	return r0
}

// MockService_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockService_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockService_Expecter) Type() *MockService_Type_Call {
	return &MockService_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockService_Type_Call) Run(run func()) *MockService_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Type_Call) Return(_a0 component.ComponentType) *MockService_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Type_Call) RunAndReturn(run func() component.ComponentType) *MockService_Type_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with no fields
func (_m *MockService) Version() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockService_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *MockService_Expecter) Version() *MockService_Version_Call {
	return &MockService_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *MockService_Version_Call) Run(run func()) *MockService_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Version_Call) Return(_a0 string) *MockService_Version_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Version_Call) RunAndReturn(run func() string) *MockService_Version_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
