// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/fintechain/skeleton/internal/domain/component"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIdentifiable creates a new instance of MockIdentifiable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIdentifiable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIdentifiable {
	mock := &MockIdentifiable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIdentifiable is an autogenerated mock type for the Identifiable type
type MockIdentifiable struct {
	mock.Mock
}

type MockIdentifiable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIdentifiable) EXPECT() *MockIdentifiable_Expecter {
	return &MockIdentifiable_Expecter{mock: &_m.Mock}
}

// Description provides a mock function for the type MockIdentifiable
func (_mock *MockIdentifiable) Description() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Description")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockIdentifiable_Description_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Description'
type MockIdentifiable_Description_Call struct {
	*mock.Call
}

// Description is a helper method to define mock.On call
func (_e *MockIdentifiable_Expecter) Description() *MockIdentifiable_Description_Call {
	return &MockIdentifiable_Description_Call{Call: _e.mock.On("Description")}
}

func (_c *MockIdentifiable_Description_Call) Run(run func()) *MockIdentifiable_Description_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIdentifiable_Description_Call) Return(s string) *MockIdentifiable_Description_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockIdentifiable_Description_Call) RunAndReturn(run func() string) *MockIdentifiable_Description_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function for the type MockIdentifiable
func (_mock *MockIdentifiable) ID() component.ComponentID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 component.ComponentID
	if returnFunc, ok := ret.Get(0).(func() component.ComponentID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(component.ComponentID)
	}
	return r0
}

// MockIdentifiable_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockIdentifiable_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockIdentifiable_Expecter) ID() *MockIdentifiable_ID_Call {
	return &MockIdentifiable_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockIdentifiable_ID_Call) Run(run func()) *MockIdentifiable_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIdentifiable_ID_Call) Return(componentID component.ComponentID) *MockIdentifiable_ID_Call {
	_c.Call.Return(componentID)
	return _c
}

func (_c *MockIdentifiable_ID_Call) RunAndReturn(run func() component.ComponentID) *MockIdentifiable_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockIdentifiable
func (_mock *MockIdentifiable) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockIdentifiable_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockIdentifiable_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockIdentifiable_Expecter) Name() *MockIdentifiable_Name_Call {
	return &MockIdentifiable_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockIdentifiable_Name_Call) Run(run func()) *MockIdentifiable_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIdentifiable_Name_Call) Return(s string) *MockIdentifiable_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockIdentifiable_Name_Call) RunAndReturn(run func() string) *MockIdentifiable_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function for the type MockIdentifiable
func (_mock *MockIdentifiable) Version() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockIdentifiable_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockIdentifiable_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *MockIdentifiable_Expecter) Version() *MockIdentifiable_Version_Call {
	return &MockIdentifiable_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *MockIdentifiable_Version_Call) Run(run func()) *MockIdentifiable_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIdentifiable_Version_Call) Return(s string) *MockIdentifiable_Version_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockIdentifiable_Version_Call) RunAndReturn(run func() string) *MockIdentifiable_Version_Call {
	_c.Call.Return(run)
	return _c
}
