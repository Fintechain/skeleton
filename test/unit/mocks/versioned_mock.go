// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockVersioned is an autogenerated mock type for the Versioned type
type MockVersioned struct {
	mock.Mock
}

type MockVersioned_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVersioned) EXPECT() *MockVersioned_Expecter {
	return &MockVersioned_Expecter{mock: &_m.Mock}
}

// CurrentVersion provides a mock function with no fields
func (_m *MockVersioned) CurrentVersion() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurrentVersion")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockVersioned_CurrentVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentVersion'
type MockVersioned_CurrentVersion_Call struct {
	*mock.Call
}

// CurrentVersion is a helper method to define mock.On call
func (_e *MockVersioned_Expecter) CurrentVersion() *MockVersioned_CurrentVersion_Call {
	return &MockVersioned_CurrentVersion_Call{Call: _e.mock.On("CurrentVersion")}
}

func (_c *MockVersioned_CurrentVersion_Call) Run(run func()) *MockVersioned_CurrentVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVersioned_CurrentVersion_Call) Return(_a0 int64) *MockVersioned_CurrentVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVersioned_CurrentVersion_Call) RunAndReturn(run func() int64) *MockVersioned_CurrentVersion_Call {
	_c.Call.Return(run)
	return _c
}

// ListVersions provides a mock function with no fields
func (_m *MockVersioned) ListVersions() []int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListVersions")
	}

	var r0 []int64
	if rf, ok := ret.Get(0).(func() []int64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	return r0
}

// MockVersioned_ListVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVersions'
type MockVersioned_ListVersions_Call struct {
	*mock.Call
}

// ListVersions is a helper method to define mock.On call
func (_e *MockVersioned_Expecter) ListVersions() *MockVersioned_ListVersions_Call {
	return &MockVersioned_ListVersions_Call{Call: _e.mock.On("ListVersions")}
}

func (_c *MockVersioned_ListVersions_Call) Run(run func()) *MockVersioned_ListVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVersioned_ListVersions_Call) Return(_a0 []int64) *MockVersioned_ListVersions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVersioned_ListVersions_Call) RunAndReturn(run func() []int64) *MockVersioned_ListVersions_Call {
	_c.Call.Return(run)
	return _c
}

// LoadVersion provides a mock function with given fields: version
func (_m *MockVersioned) LoadVersion(version int64) error {
	ret := _m.Called(version)

	if len(ret) == 0 {
		panic("no return value specified for LoadVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVersioned_LoadVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadVersion'
type MockVersioned_LoadVersion_Call struct {
	*mock.Call
}

// LoadVersion is a helper method to define mock.On call
//   - version int64
func (_e *MockVersioned_Expecter) LoadVersion(version interface{}) *MockVersioned_LoadVersion_Call {
	return &MockVersioned_LoadVersion_Call{Call: _e.mock.On("LoadVersion", version)}
}

func (_c *MockVersioned_LoadVersion_Call) Run(run func(version int64)) *MockVersioned_LoadVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockVersioned_LoadVersion_Call) Return(_a0 error) *MockVersioned_LoadVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVersioned_LoadVersion_Call) RunAndReturn(run func(int64) error) *MockVersioned_LoadVersion_Call {
	_c.Call.Return(run)
	return _c
}

// SaveVersion provides a mock function with no fields
func (_m *MockVersioned) SaveVersion() (int64, []byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SaveVersion")
	}

	var r0 int64
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func() (int64, []byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() []byte); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVersioned_SaveVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveVersion'
type MockVersioned_SaveVersion_Call struct {
	*mock.Call
}

// SaveVersion is a helper method to define mock.On call
func (_e *MockVersioned_Expecter) SaveVersion() *MockVersioned_SaveVersion_Call {
	return &MockVersioned_SaveVersion_Call{Call: _e.mock.On("SaveVersion")}
}

func (_c *MockVersioned_SaveVersion_Call) Run(run func()) *MockVersioned_SaveVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVersioned_SaveVersion_Call) Return(version int64, hash []byte, err error) *MockVersioned_SaveVersion_Call {
	_c.Call.Return(version, hash, err)
	return _c
}

func (_c *MockVersioned_SaveVersion_Call) RunAndReturn(run func() (int64, []byte, error)) *MockVersioned_SaveVersion_Call {
	_c.Call.Return(run)
	return _c
}

// SupportsVersioning provides a mock function with no fields
func (_m *MockVersioned) SupportsVersioning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SupportsVersioning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockVersioned_SupportsVersioning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SupportsVersioning'
type MockVersioned_SupportsVersioning_Call struct {
	*mock.Call
}

// SupportsVersioning is a helper method to define mock.On call
func (_e *MockVersioned_Expecter) SupportsVersioning() *MockVersioned_SupportsVersioning_Call {
	return &MockVersioned_SupportsVersioning_Call{Call: _e.mock.On("SupportsVersioning")}
}

func (_c *MockVersioned_SupportsVersioning_Call) Run(run func()) *MockVersioned_SupportsVersioning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVersioned_SupportsVersioning_Call) Return(_a0 bool) *MockVersioned_SupportsVersioning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVersioned_SupportsVersioning_Call) RunAndReturn(run func() bool) *MockVersioned_SupportsVersioning_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVersioned creates a new instance of MockVersioned. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVersioned(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVersioned {
	mock := &MockVersioned{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
