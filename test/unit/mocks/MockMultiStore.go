// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/fintechain/skeleton/internal/domain/storage"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMultiStore creates a new instance of MockMultiStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMultiStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMultiStore {
	mock := &MockMultiStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMultiStore is an autogenerated mock type for the MultiStore type
type MockMultiStore struct {
	mock.Mock
}

type MockMultiStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMultiStore) EXPECT() *MockMultiStore_Expecter {
	return &MockMultiStore_Expecter{mock: &_m.Mock}
}

// CloseAll provides a mock function for the type MockMultiStore
func (_mock *MockMultiStore) CloseAll() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMultiStore_CloseAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseAll'
type MockMultiStore_CloseAll_Call struct {
	*mock.Call
}

// CloseAll is a helper method to define mock.On call
func (_e *MockMultiStore_Expecter) CloseAll() *MockMultiStore_CloseAll_Call {
	return &MockMultiStore_CloseAll_Call{Call: _e.mock.On("CloseAll")}
}

func (_c *MockMultiStore_CloseAll_Call) Run(run func()) *MockMultiStore_CloseAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMultiStore_CloseAll_Call) Return(err error) *MockMultiStore_CloseAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMultiStore_CloseAll_Call) RunAndReturn(run func() error) *MockMultiStore_CloseAll_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStore provides a mock function for the type MockMultiStore
func (_mock *MockMultiStore) CreateStore(name string, engine string, config storage.Config) error {
	ret := _mock.Called(name, engine, config)

	if len(ret) == 0 {
		panic("no return value specified for CreateStore")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, storage.Config) error); ok {
		r0 = returnFunc(name, engine, config)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMultiStore_CreateStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStore'
type MockMultiStore_CreateStore_Call struct {
	*mock.Call
}

// CreateStore is a helper method to define mock.On call
//   - name string
//   - engine string
//   - config storage.Config
func (_e *MockMultiStore_Expecter) CreateStore(name interface{}, engine interface{}, config interface{}) *MockMultiStore_CreateStore_Call {
	return &MockMultiStore_CreateStore_Call{Call: _e.mock.On("CreateStore", name, engine, config)}
}

func (_c *MockMultiStore_CreateStore_Call) Run(run func(name string, engine string, config storage.Config)) *MockMultiStore_CreateStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 storage.Config
		if args[2] != nil {
			arg2 = args[2].(storage.Config)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMultiStore_CreateStore_Call) Return(err error) *MockMultiStore_CreateStore_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMultiStore_CreateStore_Call) RunAndReturn(run func(name string, engine string, config storage.Config) error) *MockMultiStore_CreateStore_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStore provides a mock function for the type MockMultiStore
func (_mock *MockMultiStore) DeleteStore(name string) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStore")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMultiStore_DeleteStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStore'
type MockMultiStore_DeleteStore_Call struct {
	*mock.Call
}

// DeleteStore is a helper method to define mock.On call
//   - name string
func (_e *MockMultiStore_Expecter) DeleteStore(name interface{}) *MockMultiStore_DeleteStore_Call {
	return &MockMultiStore_DeleteStore_Call{Call: _e.mock.On("DeleteStore", name)}
}

func (_c *MockMultiStore_DeleteStore_Call) Run(run func(name string)) *MockMultiStore_DeleteStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMultiStore_DeleteStore_Call) Return(err error) *MockMultiStore_DeleteStore_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMultiStore_DeleteStore_Call) RunAndReturn(run func(name string) error) *MockMultiStore_DeleteStore_Call {
	_c.Call.Return(run)
	return _c
}

// GetStore provides a mock function for the type MockMultiStore
func (_mock *MockMultiStore) GetStore(name string) (storage.Store, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetStore")
	}

	var r0 storage.Store
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (storage.Store, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) storage.Store); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Store)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMultiStore_GetStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStore'
type MockMultiStore_GetStore_Call struct {
	*mock.Call
}

// GetStore is a helper method to define mock.On call
//   - name string
func (_e *MockMultiStore_Expecter) GetStore(name interface{}) *MockMultiStore_GetStore_Call {
	return &MockMultiStore_GetStore_Call{Call: _e.mock.On("GetStore", name)}
}

func (_c *MockMultiStore_GetStore_Call) Run(run func(name string)) *MockMultiStore_GetStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMultiStore_GetStore_Call) Return(store storage.Store, err error) *MockMultiStore_GetStore_Call {
	_c.Call.Return(store, err)
	return _c
}

func (_c *MockMultiStore_GetStore_Call) RunAndReturn(run func(name string) (storage.Store, error)) *MockMultiStore_GetStore_Call {
	_c.Call.Return(run)
	return _c
}

// ListStores provides a mock function for the type MockMultiStore
func (_mock *MockMultiStore) ListStores() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListStores")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockMultiStore_ListStores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStores'
type MockMultiStore_ListStores_Call struct {
	*mock.Call
}

// ListStores is a helper method to define mock.On call
func (_e *MockMultiStore_Expecter) ListStores() *MockMultiStore_ListStores_Call {
	return &MockMultiStore_ListStores_Call{Call: _e.mock.On("ListStores")}
}

func (_c *MockMultiStore_ListStores_Call) Run(run func()) *MockMultiStore_ListStores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMultiStore_ListStores_Call) Return(strings []string) *MockMultiStore_ListStores_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockMultiStore_ListStores_Call) RunAndReturn(run func() []string) *MockMultiStore_ListStores_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterEngine provides a mock function for the type MockMultiStore
func (_mock *MockMultiStore) RegisterEngine(engine storage.Engine) error {
	ret := _mock.Called(engine)

	if len(ret) == 0 {
		panic("no return value specified for RegisterEngine")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(storage.Engine) error); ok {
		r0 = returnFunc(engine)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMultiStore_RegisterEngine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterEngine'
type MockMultiStore_RegisterEngine_Call struct {
	*mock.Call
}

// RegisterEngine is a helper method to define mock.On call
//   - engine storage.Engine
func (_e *MockMultiStore_Expecter) RegisterEngine(engine interface{}) *MockMultiStore_RegisterEngine_Call {
	return &MockMultiStore_RegisterEngine_Call{Call: _e.mock.On("RegisterEngine", engine)}
}

func (_c *MockMultiStore_RegisterEngine_Call) Run(run func(engine storage.Engine)) *MockMultiStore_RegisterEngine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 storage.Engine
		if args[0] != nil {
			arg0 = args[0].(storage.Engine)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMultiStore_RegisterEngine_Call) Return(err error) *MockMultiStore_RegisterEngine_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMultiStore_RegisterEngine_Call) RunAndReturn(run func(engine storage.Engine) error) *MockMultiStore_RegisterEngine_Call {
	_c.Call.Return(run)
	return _c
}
