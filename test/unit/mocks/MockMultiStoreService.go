// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/fintechain/skeleton/internal/domain/component"
	"github.com/fintechain/skeleton/internal/domain/context"
	"github.com/fintechain/skeleton/internal/domain/storage"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMultiStoreService creates a new instance of MockMultiStoreService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMultiStoreService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMultiStoreService {
	mock := &MockMultiStoreService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMultiStoreService is an autogenerated mock type for the MultiStoreService type
type MockMultiStoreService struct {
	mock.Mock
}

type MockMultiStoreService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMultiStoreService) EXPECT() *MockMultiStoreService_Expecter {
	return &MockMultiStoreService_Expecter{mock: &_m.Mock}
}

// CloseAll provides a mock function for the type MockMultiStoreService
func (_mock *MockMultiStoreService) CloseAll() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMultiStoreService_CloseAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseAll'
type MockMultiStoreService_CloseAll_Call struct {
	*mock.Call
}

// CloseAll is a helper method to define mock.On call
func (_e *MockMultiStoreService_Expecter) CloseAll() *MockMultiStoreService_CloseAll_Call {
	return &MockMultiStoreService_CloseAll_Call{Call: _e.mock.On("CloseAll")}
}

func (_c *MockMultiStoreService_CloseAll_Call) Run(run func()) *MockMultiStoreService_CloseAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMultiStoreService_CloseAll_Call) Return(err error) *MockMultiStoreService_CloseAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMultiStoreService_CloseAll_Call) RunAndReturn(run func() error) *MockMultiStoreService_CloseAll_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStore provides a mock function for the type MockMultiStoreService
func (_mock *MockMultiStoreService) CreateStore(name string, engine string, config storage.Config) error {
	ret := _mock.Called(name, engine, config)

	if len(ret) == 0 {
		panic("no return value specified for CreateStore")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, storage.Config) error); ok {
		r0 = returnFunc(name, engine, config)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMultiStoreService_CreateStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStore'
type MockMultiStoreService_CreateStore_Call struct {
	*mock.Call
}

// CreateStore is a helper method to define mock.On call
//   - name string
//   - engine string
//   - config storage.Config
func (_e *MockMultiStoreService_Expecter) CreateStore(name interface{}, engine interface{}, config interface{}) *MockMultiStoreService_CreateStore_Call {
	return &MockMultiStoreService_CreateStore_Call{Call: _e.mock.On("CreateStore", name, engine, config)}
}

func (_c *MockMultiStoreService_CreateStore_Call) Run(run func(name string, engine string, config storage.Config)) *MockMultiStoreService_CreateStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 storage.Config
		if args[2] != nil {
			arg2 = args[2].(storage.Config)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMultiStoreService_CreateStore_Call) Return(err error) *MockMultiStoreService_CreateStore_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMultiStoreService_CreateStore_Call) RunAndReturn(run func(name string, engine string, config storage.Config) error) *MockMultiStoreService_CreateStore_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStore provides a mock function for the type MockMultiStoreService
func (_mock *MockMultiStoreService) DeleteStore(name string) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStore")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMultiStoreService_DeleteStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStore'
type MockMultiStoreService_DeleteStore_Call struct {
	*mock.Call
}

// DeleteStore is a helper method to define mock.On call
//   - name string
func (_e *MockMultiStoreService_Expecter) DeleteStore(name interface{}) *MockMultiStoreService_DeleteStore_Call {
	return &MockMultiStoreService_DeleteStore_Call{Call: _e.mock.On("DeleteStore", name)}
}

func (_c *MockMultiStoreService_DeleteStore_Call) Run(run func(name string)) *MockMultiStoreService_DeleteStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMultiStoreService_DeleteStore_Call) Return(err error) *MockMultiStoreService_DeleteStore_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMultiStoreService_DeleteStore_Call) RunAndReturn(run func(name string) error) *MockMultiStoreService_DeleteStore_Call {
	_c.Call.Return(run)
	return _c
}

// Description provides a mock function for the type MockMultiStoreService
func (_mock *MockMultiStoreService) Description() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Description")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockMultiStoreService_Description_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Description'
type MockMultiStoreService_Description_Call struct {
	*mock.Call
}

// Description is a helper method to define mock.On call
func (_e *MockMultiStoreService_Expecter) Description() *MockMultiStoreService_Description_Call {
	return &MockMultiStoreService_Description_Call{Call: _e.mock.On("Description")}
}

func (_c *MockMultiStoreService_Description_Call) Run(run func()) *MockMultiStoreService_Description_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMultiStoreService_Description_Call) Return(s string) *MockMultiStoreService_Description_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockMultiStoreService_Description_Call) RunAndReturn(run func() string) *MockMultiStoreService_Description_Call {
	_c.Call.Return(run)
	return _c
}

// Dispose provides a mock function for the type MockMultiStoreService
func (_mock *MockMultiStoreService) Dispose() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dispose")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMultiStoreService_Dispose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dispose'
type MockMultiStoreService_Dispose_Call struct {
	*mock.Call
}

// Dispose is a helper method to define mock.On call
func (_e *MockMultiStoreService_Expecter) Dispose() *MockMultiStoreService_Dispose_Call {
	return &MockMultiStoreService_Dispose_Call{Call: _e.mock.On("Dispose")}
}

func (_c *MockMultiStoreService_Dispose_Call) Run(run func()) *MockMultiStoreService_Dispose_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMultiStoreService_Dispose_Call) Return(err error) *MockMultiStoreService_Dispose_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMultiStoreService_Dispose_Call) RunAndReturn(run func() error) *MockMultiStoreService_Dispose_Call {
	_c.Call.Return(run)
	return _c
}

// GetStore provides a mock function for the type MockMultiStoreService
func (_mock *MockMultiStoreService) GetStore(name string) (storage.Store, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetStore")
	}

	var r0 storage.Store
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (storage.Store, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) storage.Store); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Store)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMultiStoreService_GetStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStore'
type MockMultiStoreService_GetStore_Call struct {
	*mock.Call
}

// GetStore is a helper method to define mock.On call
//   - name string
func (_e *MockMultiStoreService_Expecter) GetStore(name interface{}) *MockMultiStoreService_GetStore_Call {
	return &MockMultiStoreService_GetStore_Call{Call: _e.mock.On("GetStore", name)}
}

func (_c *MockMultiStoreService_GetStore_Call) Run(run func(name string)) *MockMultiStoreService_GetStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMultiStoreService_GetStore_Call) Return(store storage.Store, err error) *MockMultiStoreService_GetStore_Call {
	_c.Call.Return(store, err)
	return _c
}

func (_c *MockMultiStoreService_GetStore_Call) RunAndReturn(run func(name string) (storage.Store, error)) *MockMultiStoreService_GetStore_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function for the type MockMultiStoreService
func (_mock *MockMultiStoreService) ID() component.ComponentID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 component.ComponentID
	if returnFunc, ok := ret.Get(0).(func() component.ComponentID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(component.ComponentID)
	}
	return r0
}

// MockMultiStoreService_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockMultiStoreService_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockMultiStoreService_Expecter) ID() *MockMultiStoreService_ID_Call {
	return &MockMultiStoreService_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockMultiStoreService_ID_Call) Run(run func()) *MockMultiStoreService_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMultiStoreService_ID_Call) Return(componentID component.ComponentID) *MockMultiStoreService_ID_Call {
	_c.Call.Return(componentID)
	return _c
}

func (_c *MockMultiStoreService_ID_Call) RunAndReturn(run func() component.ComponentID) *MockMultiStoreService_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function for the type MockMultiStoreService
func (_mock *MockMultiStoreService) Initialize(ctx context.Context, system component.System) error {
	ret := _mock.Called(ctx, system)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, component.System) error); ok {
		r0 = returnFunc(ctx, system)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMultiStoreService_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockMultiStoreService_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - ctx context.Context
//   - system component.System
func (_e *MockMultiStoreService_Expecter) Initialize(ctx interface{}, system interface{}) *MockMultiStoreService_Initialize_Call {
	return &MockMultiStoreService_Initialize_Call{Call: _e.mock.On("Initialize", ctx, system)}
}

func (_c *MockMultiStoreService_Initialize_Call) Run(run func(ctx context.Context, system component.System)) *MockMultiStoreService_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 component.System
		if args[1] != nil {
			arg1 = args[1].(component.System)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMultiStoreService_Initialize_Call) Return(err error) *MockMultiStoreService_Initialize_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMultiStoreService_Initialize_Call) RunAndReturn(run func(ctx context.Context, system component.System) error) *MockMultiStoreService_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// IsRunning provides a mock function for the type MockMultiStoreService
func (_mock *MockMultiStoreService) IsRunning() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockMultiStoreService_IsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRunning'
type MockMultiStoreService_IsRunning_Call struct {
	*mock.Call
}

// IsRunning is a helper method to define mock.On call
func (_e *MockMultiStoreService_Expecter) IsRunning() *MockMultiStoreService_IsRunning_Call {
	return &MockMultiStoreService_IsRunning_Call{Call: _e.mock.On("IsRunning")}
}

func (_c *MockMultiStoreService_IsRunning_Call) Run(run func()) *MockMultiStoreService_IsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMultiStoreService_IsRunning_Call) Return(b bool) *MockMultiStoreService_IsRunning_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockMultiStoreService_IsRunning_Call) RunAndReturn(run func() bool) *MockMultiStoreService_IsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// ListStores provides a mock function for the type MockMultiStoreService
func (_mock *MockMultiStoreService) ListStores() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListStores")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockMultiStoreService_ListStores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStores'
type MockMultiStoreService_ListStores_Call struct {
	*mock.Call
}

// ListStores is a helper method to define mock.On call
func (_e *MockMultiStoreService_Expecter) ListStores() *MockMultiStoreService_ListStores_Call {
	return &MockMultiStoreService_ListStores_Call{Call: _e.mock.On("ListStores")}
}

func (_c *MockMultiStoreService_ListStores_Call) Run(run func()) *MockMultiStoreService_ListStores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMultiStoreService_ListStores_Call) Return(strings []string) *MockMultiStoreService_ListStores_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockMultiStoreService_ListStores_Call) RunAndReturn(run func() []string) *MockMultiStoreService_ListStores_Call {
	_c.Call.Return(run)
	return _c
}

// Metadata provides a mock function for the type MockMultiStoreService
func (_mock *MockMultiStoreService) Metadata() component.Metadata {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Metadata")
	}

	var r0 component.Metadata
	if returnFunc, ok := ret.Get(0).(func() component.Metadata); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(component.Metadata)
		}
	}
	return r0
}

// MockMultiStoreService_Metadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Metadata'
type MockMultiStoreService_Metadata_Call struct {
	*mock.Call
}

// Metadata is a helper method to define mock.On call
func (_e *MockMultiStoreService_Expecter) Metadata() *MockMultiStoreService_Metadata_Call {
	return &MockMultiStoreService_Metadata_Call{Call: _e.mock.On("Metadata")}
}

func (_c *MockMultiStoreService_Metadata_Call) Run(run func()) *MockMultiStoreService_Metadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMultiStoreService_Metadata_Call) Return(metadata component.Metadata) *MockMultiStoreService_Metadata_Call {
	_c.Call.Return(metadata)
	return _c
}

func (_c *MockMultiStoreService_Metadata_Call) RunAndReturn(run func() component.Metadata) *MockMultiStoreService_Metadata_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockMultiStoreService
func (_mock *MockMultiStoreService) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockMultiStoreService_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockMultiStoreService_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockMultiStoreService_Expecter) Name() *MockMultiStoreService_Name_Call {
	return &MockMultiStoreService_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockMultiStoreService_Name_Call) Run(run func()) *MockMultiStoreService_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMultiStoreService_Name_Call) Return(s string) *MockMultiStoreService_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockMultiStoreService_Name_Call) RunAndReturn(run func() string) *MockMultiStoreService_Name_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterEngine provides a mock function for the type MockMultiStoreService
func (_mock *MockMultiStoreService) RegisterEngine(engine storage.Engine) error {
	ret := _mock.Called(engine)

	if len(ret) == 0 {
		panic("no return value specified for RegisterEngine")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(storage.Engine) error); ok {
		r0 = returnFunc(engine)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMultiStoreService_RegisterEngine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterEngine'
type MockMultiStoreService_RegisterEngine_Call struct {
	*mock.Call
}

// RegisterEngine is a helper method to define mock.On call
//   - engine storage.Engine
func (_e *MockMultiStoreService_Expecter) RegisterEngine(engine interface{}) *MockMultiStoreService_RegisterEngine_Call {
	return &MockMultiStoreService_RegisterEngine_Call{Call: _e.mock.On("RegisterEngine", engine)}
}

func (_c *MockMultiStoreService_RegisterEngine_Call) Run(run func(engine storage.Engine)) *MockMultiStoreService_RegisterEngine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 storage.Engine
		if args[0] != nil {
			arg0 = args[0].(storage.Engine)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMultiStoreService_RegisterEngine_Call) Return(err error) *MockMultiStoreService_RegisterEngine_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMultiStoreService_RegisterEngine_Call) RunAndReturn(run func(engine storage.Engine) error) *MockMultiStoreService_RegisterEngine_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockMultiStoreService
func (_mock *MockMultiStoreService) Start(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMultiStoreService_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockMultiStoreService_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMultiStoreService_Expecter) Start(ctx interface{}) *MockMultiStoreService_Start_Call {
	return &MockMultiStoreService_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockMultiStoreService_Start_Call) Run(run func(ctx context.Context)) *MockMultiStoreService_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMultiStoreService_Start_Call) Return(err error) *MockMultiStoreService_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMultiStoreService_Start_Call) RunAndReturn(run func(ctx context.Context) error) *MockMultiStoreService_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function for the type MockMultiStoreService
func (_mock *MockMultiStoreService) Status() component.ServiceStatus {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 component.ServiceStatus
	if returnFunc, ok := ret.Get(0).(func() component.ServiceStatus); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(component.ServiceStatus)
	}
	return r0
}

// MockMultiStoreService_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockMultiStoreService_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *MockMultiStoreService_Expecter) Status() *MockMultiStoreService_Status_Call {
	return &MockMultiStoreService_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *MockMultiStoreService_Status_Call) Run(run func()) *MockMultiStoreService_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMultiStoreService_Status_Call) Return(serviceStatus component.ServiceStatus) *MockMultiStoreService_Status_Call {
	_c.Call.Return(serviceStatus)
	return _c
}

func (_c *MockMultiStoreService_Status_Call) RunAndReturn(run func() component.ServiceStatus) *MockMultiStoreService_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockMultiStoreService
func (_mock *MockMultiStoreService) Stop(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMultiStoreService_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockMultiStoreService_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMultiStoreService_Expecter) Stop(ctx interface{}) *MockMultiStoreService_Stop_Call {
	return &MockMultiStoreService_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *MockMultiStoreService_Stop_Call) Run(run func(ctx context.Context)) *MockMultiStoreService_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMultiStoreService_Stop_Call) Return(err error) *MockMultiStoreService_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMultiStoreService_Stop_Call) RunAndReturn(run func(ctx context.Context) error) *MockMultiStoreService_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function for the type MockMultiStoreService
func (_mock *MockMultiStoreService) Type() component.ComponentType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 component.ComponentType
	if returnFunc, ok := ret.Get(0).(func() component.ComponentType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(component.ComponentType)
	}
	return r0
}

// MockMultiStoreService_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockMultiStoreService_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockMultiStoreService_Expecter) Type() *MockMultiStoreService_Type_Call {
	return &MockMultiStoreService_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockMultiStoreService_Type_Call) Run(run func()) *MockMultiStoreService_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMultiStoreService_Type_Call) Return(componentType component.ComponentType) *MockMultiStoreService_Type_Call {
	_c.Call.Return(componentType)
	return _c
}

func (_c *MockMultiStoreService_Type_Call) RunAndReturn(run func() component.ComponentType) *MockMultiStoreService_Type_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function for the type MockMultiStoreService
func (_mock *MockMultiStoreService) Version() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockMultiStoreService_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockMultiStoreService_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *MockMultiStoreService_Expecter) Version() *MockMultiStoreService_Version_Call {
	return &MockMultiStoreService_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *MockMultiStoreService_Version_Call) Run(run func()) *MockMultiStoreService_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMultiStoreService_Version_Call) Return(s string) *MockMultiStoreService_Version_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockMultiStoreService_Version_Call) RunAndReturn(run func() string) *MockMultiStoreService_Version_Call {
	_c.Call.Return(run)
	return _c
}
