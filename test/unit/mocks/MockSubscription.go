// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockSubscription creates a new instance of MockSubscription. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscription(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscription {
	mock := &MockSubscription{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSubscription is an autogenerated mock type for the Subscription type
type MockSubscription struct {
	mock.Mock
}

type MockSubscription_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscription) EXPECT() *MockSubscription_Expecter {
	return &MockSubscription_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function for the type MockSubscription
func (_mock *MockSubscription) Cancel() {
	_mock.Called()
	return
}

// MockSubscription_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type MockSubscription_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
func (_e *MockSubscription_Expecter) Cancel() *MockSubscription_Cancel_Call {
	return &MockSubscription_Cancel_Call{Call: _e.mock.On("Cancel")}
}

func (_c *MockSubscription_Cancel_Call) Run(run func()) *MockSubscription_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscription_Cancel_Call) Return() *MockSubscription_Cancel_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSubscription_Cancel_Call) RunAndReturn(run func()) *MockSubscription_Cancel_Call {
	_c.Run(run)
	return _c
}

// Topic provides a mock function for the type MockSubscription
func (_mock *MockSubscription) Topic() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Topic")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSubscription_Topic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Topic'
type MockSubscription_Topic_Call struct {
	*mock.Call
}

// Topic is a helper method to define mock.On call
func (_e *MockSubscription_Expecter) Topic() *MockSubscription_Topic_Call {
	return &MockSubscription_Topic_Call{Call: _e.mock.On("Topic")}
}

func (_c *MockSubscription_Topic_Call) Run(run func()) *MockSubscription_Topic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscription_Topic_Call) Return(s string) *MockSubscription_Topic_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSubscription_Topic_Call) RunAndReturn(run func() string) *MockSubscription_Topic_Call {
	_c.Call.Return(run)
	return _c
}
