// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	component "github.com/fintechain/skeleton/internal/domain/component"
	context "github.com/fintechain/skeleton/internal/domain/context"

	event "github.com/fintechain/skeleton/internal/domain/event"

	mock "github.com/stretchr/testify/mock"
)

// MockEventBusService is an autogenerated mock type for the EventBusService type
type MockEventBusService struct {
	mock.Mock
}

type MockEventBusService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventBusService) EXPECT() *MockEventBusService_Expecter {
	return &MockEventBusService_Expecter{mock: &_m.Mock}
}

// Description provides a mock function with no fields
func (_m *MockEventBusService) Description() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Description")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEventBusService_Description_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Description'
type MockEventBusService_Description_Call struct {
	*mock.Call
}

// Description is a helper method to define mock.On call
func (_e *MockEventBusService_Expecter) Description() *MockEventBusService_Description_Call {
	return &MockEventBusService_Description_Call{Call: _e.mock.On("Description")}
}

func (_c *MockEventBusService_Description_Call) Run(run func()) *MockEventBusService_Description_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventBusService_Description_Call) Return(_a0 string) *MockEventBusService_Description_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBusService_Description_Call) RunAndReturn(run func() string) *MockEventBusService_Description_Call {
	_c.Call.Return(run)
	return _c
}

// Dispose provides a mock function with no fields
func (_m *MockEventBusService) Dispose() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dispose")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventBusService_Dispose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dispose'
type MockEventBusService_Dispose_Call struct {
	*mock.Call
}

// Dispose is a helper method to define mock.On call
func (_e *MockEventBusService_Expecter) Dispose() *MockEventBusService_Dispose_Call {
	return &MockEventBusService_Dispose_Call{Call: _e.mock.On("Dispose")}
}

func (_c *MockEventBusService_Dispose_Call) Run(run func()) *MockEventBusService_Dispose_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventBusService_Dispose_Call) Return(_a0 error) *MockEventBusService_Dispose_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBusService_Dispose_Call) RunAndReturn(run func() error) *MockEventBusService_Dispose_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *MockEventBusService) ID() component.ComponentID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 component.ComponentID
	if rf, ok := ret.Get(0).(func() component.ComponentID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(component.ComponentID)
	}

	return r0
}

// MockEventBusService_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockEventBusService_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockEventBusService_Expecter) ID() *MockEventBusService_ID_Call {
	return &MockEventBusService_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockEventBusService_ID_Call) Run(run func()) *MockEventBusService_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventBusService_ID_Call) Return(_a0 component.ComponentID) *MockEventBusService_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBusService_ID_Call) RunAndReturn(run func() component.ComponentID) *MockEventBusService_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with given fields: ctx, system
func (_m *MockEventBusService) Initialize(ctx context.Context, system component.System) error {
	ret := _m.Called(ctx, system)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, component.System) error); ok {
		r0 = rf(ctx, system)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventBusService_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockEventBusService_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - ctx context.Context
//   - system component.System
func (_e *MockEventBusService_Expecter) Initialize(ctx interface{}, system interface{}) *MockEventBusService_Initialize_Call {
	return &MockEventBusService_Initialize_Call{Call: _e.mock.On("Initialize", ctx, system)}
}

func (_c *MockEventBusService_Initialize_Call) Run(run func(ctx context.Context, system component.System)) *MockEventBusService_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(component.System))
	})
	return _c
}

func (_c *MockEventBusService_Initialize_Call) Return(_a0 error) *MockEventBusService_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBusService_Initialize_Call) RunAndReturn(run func(context.Context, component.System) error) *MockEventBusService_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// IsRunning provides a mock function with no fields
func (_m *MockEventBusService) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEventBusService_IsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRunning'
type MockEventBusService_IsRunning_Call struct {
	*mock.Call
}

// IsRunning is a helper method to define mock.On call
func (_e *MockEventBusService_Expecter) IsRunning() *MockEventBusService_IsRunning_Call {
	return &MockEventBusService_IsRunning_Call{Call: _e.mock.On("IsRunning")}
}

func (_c *MockEventBusService_IsRunning_Call) Run(run func()) *MockEventBusService_IsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventBusService_IsRunning_Call) Return(_a0 bool) *MockEventBusService_IsRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBusService_IsRunning_Call) RunAndReturn(run func() bool) *MockEventBusService_IsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// Metadata provides a mock function with no fields
func (_m *MockEventBusService) Metadata() component.Metadata {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Metadata")
	}

	var r0 component.Metadata
	if rf, ok := ret.Get(0).(func() component.Metadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(component.Metadata)
		}
	}

	return r0
}

// MockEventBusService_Metadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Metadata'
type MockEventBusService_Metadata_Call struct {
	*mock.Call
}

// Metadata is a helper method to define mock.On call
func (_e *MockEventBusService_Expecter) Metadata() *MockEventBusService_Metadata_Call {
	return &MockEventBusService_Metadata_Call{Call: _e.mock.On("Metadata")}
}

func (_c *MockEventBusService_Metadata_Call) Run(run func()) *MockEventBusService_Metadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventBusService_Metadata_Call) Return(_a0 component.Metadata) *MockEventBusService_Metadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBusService_Metadata_Call) RunAndReturn(run func() component.Metadata) *MockEventBusService_Metadata_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockEventBusService) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEventBusService_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockEventBusService_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockEventBusService_Expecter) Name() *MockEventBusService_Name_Call {
	return &MockEventBusService_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockEventBusService_Name_Call) Run(run func()) *MockEventBusService_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventBusService_Name_Call) Return(_a0 string) *MockEventBusService_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBusService_Name_Call) RunAndReturn(run func() string) *MockEventBusService_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: _a0
func (_m *MockEventBusService) Publish(_a0 *event.Event) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*event.Event) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventBusService_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockEventBusService_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - _a0 *event.Event
func (_e *MockEventBusService_Expecter) Publish(_a0 interface{}) *MockEventBusService_Publish_Call {
	return &MockEventBusService_Publish_Call{Call: _e.mock.On("Publish", _a0)}
}

func (_c *MockEventBusService_Publish_Call) Run(run func(_a0 *event.Event)) *MockEventBusService_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*event.Event))
	})
	return _c
}

func (_c *MockEventBusService_Publish_Call) Return(_a0 error) *MockEventBusService_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBusService_Publish_Call) RunAndReturn(run func(*event.Event) error) *MockEventBusService_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// PublishAsync provides a mock function with given fields: _a0
func (_m *MockEventBusService) PublishAsync(_a0 *event.Event) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PublishAsync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*event.Event) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventBusService_PublishAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishAsync'
type MockEventBusService_PublishAsync_Call struct {
	*mock.Call
}

// PublishAsync is a helper method to define mock.On call
//   - _a0 *event.Event
func (_e *MockEventBusService_Expecter) PublishAsync(_a0 interface{}) *MockEventBusService_PublishAsync_Call {
	return &MockEventBusService_PublishAsync_Call{Call: _e.mock.On("PublishAsync", _a0)}
}

func (_c *MockEventBusService_PublishAsync_Call) Run(run func(_a0 *event.Event)) *MockEventBusService_PublishAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*event.Event))
	})
	return _c
}

func (_c *MockEventBusService_PublishAsync_Call) Return(_a0 error) *MockEventBusService_PublishAsync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBusService_PublishAsync_Call) RunAndReturn(run func(*event.Event) error) *MockEventBusService_PublishAsync_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockEventBusService) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventBusService_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockEventBusService_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEventBusService_Expecter) Start(ctx interface{}) *MockEventBusService_Start_Call {
	return &MockEventBusService_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockEventBusService_Start_Call) Run(run func(ctx context.Context)) *MockEventBusService_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEventBusService_Start_Call) Return(_a0 error) *MockEventBusService_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBusService_Start_Call) RunAndReturn(run func(context.Context) error) *MockEventBusService_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with no fields
func (_m *MockEventBusService) Status() component.ServiceStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 component.ServiceStatus
	if rf, ok := ret.Get(0).(func() component.ServiceStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(component.ServiceStatus)
	}

	return r0
}

// MockEventBusService_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockEventBusService_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *MockEventBusService_Expecter) Status() *MockEventBusService_Status_Call {
	return &MockEventBusService_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *MockEventBusService_Status_Call) Run(run func()) *MockEventBusService_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventBusService_Status_Call) Return(_a0 component.ServiceStatus) *MockEventBusService_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBusService_Status_Call) RunAndReturn(run func() component.ServiceStatus) *MockEventBusService_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx
func (_m *MockEventBusService) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventBusService_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockEventBusService_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEventBusService_Expecter) Stop(ctx interface{}) *MockEventBusService_Stop_Call {
	return &MockEventBusService_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *MockEventBusService_Stop_Call) Run(run func(ctx context.Context)) *MockEventBusService_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEventBusService_Stop_Call) Return(_a0 error) *MockEventBusService_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBusService_Stop_Call) RunAndReturn(run func(context.Context) error) *MockEventBusService_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: eventType, handler
func (_m *MockEventBusService) Subscribe(eventType string, handler event.EventHandler) event.Subscription {
	ret := _m.Called(eventType, handler)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(string, event.EventHandler) event.Subscription); ok {
		r0 = rf(eventType, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	return r0
}

// MockEventBusService_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockEventBusService_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - eventType string
//   - handler event.EventHandler
func (_e *MockEventBusService_Expecter) Subscribe(eventType interface{}, handler interface{}) *MockEventBusService_Subscribe_Call {
	return &MockEventBusService_Subscribe_Call{Call: _e.mock.On("Subscribe", eventType, handler)}
}

func (_c *MockEventBusService_Subscribe_Call) Run(run func(eventType string, handler event.EventHandler)) *MockEventBusService_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(event.EventHandler))
	})
	return _c
}

func (_c *MockEventBusService_Subscribe_Call) Return(_a0 event.Subscription) *MockEventBusService_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBusService_Subscribe_Call) RunAndReturn(run func(string, event.EventHandler) event.Subscription) *MockEventBusService_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeAsync provides a mock function with given fields: eventType, handler
func (_m *MockEventBusService) SubscribeAsync(eventType string, handler event.EventHandler) event.Subscription {
	ret := _m.Called(eventType, handler)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeAsync")
	}

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(string, event.EventHandler) event.Subscription); ok {
		r0 = rf(eventType, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	return r0
}

// MockEventBusService_SubscribeAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeAsync'
type MockEventBusService_SubscribeAsync_Call struct {
	*mock.Call
}

// SubscribeAsync is a helper method to define mock.On call
//   - eventType string
//   - handler event.EventHandler
func (_e *MockEventBusService_Expecter) SubscribeAsync(eventType interface{}, handler interface{}) *MockEventBusService_SubscribeAsync_Call {
	return &MockEventBusService_SubscribeAsync_Call{Call: _e.mock.On("SubscribeAsync", eventType, handler)}
}

func (_c *MockEventBusService_SubscribeAsync_Call) Run(run func(eventType string, handler event.EventHandler)) *MockEventBusService_SubscribeAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(event.EventHandler))
	})
	return _c
}

func (_c *MockEventBusService_SubscribeAsync_Call) Return(_a0 event.Subscription) *MockEventBusService_SubscribeAsync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBusService_SubscribeAsync_Call) RunAndReturn(run func(string, event.EventHandler) event.Subscription) *MockEventBusService_SubscribeAsync_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with no fields
func (_m *MockEventBusService) Type() component.ComponentType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 component.ComponentType
	if rf, ok := ret.Get(0).(func() component.ComponentType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(component.ComponentType)
	}

	return r0
}

// MockEventBusService_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockEventBusService_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockEventBusService_Expecter) Type() *MockEventBusService_Type_Call {
	return &MockEventBusService_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockEventBusService_Type_Call) Run(run func()) *MockEventBusService_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventBusService_Type_Call) Return(_a0 component.ComponentType) *MockEventBusService_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBusService_Type_Call) RunAndReturn(run func() component.ComponentType) *MockEventBusService_Type_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with no fields
func (_m *MockEventBusService) Version() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEventBusService_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockEventBusService_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *MockEventBusService_Expecter) Version() *MockEventBusService_Version_Call {
	return &MockEventBusService_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *MockEventBusService_Version_Call) Run(run func()) *MockEventBusService_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventBusService_Version_Call) Return(_a0 string) *MockEventBusService_Version_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBusService_Version_Call) RunAndReturn(run func() string) *MockEventBusService_Version_Call {
	_c.Call.Return(run)
	return _c
}

// WaitAsync provides a mock function with no fields
func (_m *MockEventBusService) WaitAsync() {
	_m.Called()
}

// MockEventBusService_WaitAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitAsync'
type MockEventBusService_WaitAsync_Call struct {
	*mock.Call
}

// WaitAsync is a helper method to define mock.On call
func (_e *MockEventBusService_Expecter) WaitAsync() *MockEventBusService_WaitAsync_Call {
	return &MockEventBusService_WaitAsync_Call{Call: _e.mock.On("WaitAsync")}
}

func (_c *MockEventBusService_WaitAsync_Call) Run(run func()) *MockEventBusService_WaitAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventBusService_WaitAsync_Call) Return() *MockEventBusService_WaitAsync_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventBusService_WaitAsync_Call) RunAndReturn(run func()) *MockEventBusService_WaitAsync_Call {
	_c.Run(run)
	return _c
}

// NewMockEventBusService creates a new instance of MockEventBusService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventBusService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventBusService {
	mock := &MockEventBusService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
