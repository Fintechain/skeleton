// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/fintechain/skeleton/internal/domain/storage"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEngine creates a new instance of MockEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEngine {
	mock := &MockEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEngine is an autogenerated mock type for the Engine type
type MockEngine struct {
	mock.Mock
}

type MockEngine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEngine) EXPECT() *MockEngine_Expecter {
	return &MockEngine_Expecter{mock: &_m.Mock}
}

// Capabilities provides a mock function for the type MockEngine
func (_mock *MockEngine) Capabilities() storage.Capabilities {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Capabilities")
	}

	var r0 storage.Capabilities
	if returnFunc, ok := ret.Get(0).(func() storage.Capabilities); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(storage.Capabilities)
	}
	return r0
}

// MockEngine_Capabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Capabilities'
type MockEngine_Capabilities_Call struct {
	*mock.Call
}

// Capabilities is a helper method to define mock.On call
func (_e *MockEngine_Expecter) Capabilities() *MockEngine_Capabilities_Call {
	return &MockEngine_Capabilities_Call{Call: _e.mock.On("Capabilities")}
}

func (_c *MockEngine_Capabilities_Call) Run(run func()) *MockEngine_Capabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEngine_Capabilities_Call) Return(capabilities storage.Capabilities) *MockEngine_Capabilities_Call {
	_c.Call.Return(capabilities)
	return _c
}

func (_c *MockEngine_Capabilities_Call) RunAndReturn(run func() storage.Capabilities) *MockEngine_Capabilities_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockEngine
func (_mock *MockEngine) Create(name string, path string, config storage.Config) (storage.Store, error) {
	ret := _mock.Called(name, path, config)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 storage.Store
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, storage.Config) (storage.Store, error)); ok {
		return returnFunc(name, path, config)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, storage.Config) storage.Store); ok {
		r0 = returnFunc(name, path, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Store)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, storage.Config) error); ok {
		r1 = returnFunc(name, path, config)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEngine_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockEngine_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - name string
//   - path string
//   - config storage.Config
func (_e *MockEngine_Expecter) Create(name interface{}, path interface{}, config interface{}) *MockEngine_Create_Call {
	return &MockEngine_Create_Call{Call: _e.mock.On("Create", name, path, config)}
}

func (_c *MockEngine_Create_Call) Run(run func(name string, path string, config storage.Config)) *MockEngine_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 storage.Config
		if args[2] != nil {
			arg2 = args[2].(storage.Config)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEngine_Create_Call) Return(store storage.Store, err error) *MockEngine_Create_Call {
	_c.Call.Return(store, err)
	return _c
}

func (_c *MockEngine_Create_Call) RunAndReturn(run func(name string, path string, config storage.Config) (storage.Store, error)) *MockEngine_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockEngine
func (_mock *MockEngine) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEngine_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockEngine_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockEngine_Expecter) Name() *MockEngine_Name_Call {
	return &MockEngine_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockEngine_Name_Call) Run(run func()) *MockEngine_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEngine_Name_Call) Return(s string) *MockEngine_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEngine_Name_Call) RunAndReturn(run func() string) *MockEngine_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function for the type MockEngine
func (_mock *MockEngine) Open(name string, path string) (storage.Store, error) {
	ret := _mock.Called(name, path)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 storage.Store
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (storage.Store, error)); ok {
		return returnFunc(name, path)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) storage.Store); ok {
		r0 = returnFunc(name, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Store)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(name, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEngine_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockEngine_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - name string
//   - path string
func (_e *MockEngine_Expecter) Open(name interface{}, path interface{}) *MockEngine_Open_Call {
	return &MockEngine_Open_Call{Call: _e.mock.On("Open", name, path)}
}

func (_c *MockEngine_Open_Call) Run(run func(name string, path string)) *MockEngine_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEngine_Open_Call) Return(store storage.Store, err error) *MockEngine_Open_Call {
	_c.Call.Return(store, err)
	return _c
}

func (_c *MockEngine_Open_Call) RunAndReturn(run func(name string, path string) (storage.Store, error)) *MockEngine_Open_Call {
	_c.Call.Return(run)
	return _c
}
