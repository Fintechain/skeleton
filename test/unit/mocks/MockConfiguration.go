// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockConfiguration creates a new instance of MockConfiguration. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfiguration(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfiguration {
	mock := &MockConfiguration{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfiguration is an autogenerated mock type for the Configuration type
type MockConfiguration struct {
	mock.Mock
}

type MockConfiguration_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfiguration) EXPECT() *MockConfiguration_Expecter {
	return &MockConfiguration_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function for the type MockConfiguration
func (_mock *MockConfiguration) Exists(key string) bool {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockConfiguration_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockConfiguration_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - key string
func (_e *MockConfiguration_Expecter) Exists(key interface{}) *MockConfiguration_Exists_Call {
	return &MockConfiguration_Exists_Call{Call: _e.mock.On("Exists", key)}
}

func (_c *MockConfiguration_Exists_Call) Run(run func(key string)) *MockConfiguration_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfiguration_Exists_Call) Return(b bool) *MockConfiguration_Exists_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockConfiguration_Exists_Call) RunAndReturn(run func(key string) bool) *MockConfiguration_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// GetBool provides a mock function for the type MockConfiguration
func (_mock *MockConfiguration) GetBool(key string) (bool, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetBool")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfiguration_GetBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBool'
type MockConfiguration_GetBool_Call struct {
	*mock.Call
}

// GetBool is a helper method to define mock.On call
//   - key string
func (_e *MockConfiguration_Expecter) GetBool(key interface{}) *MockConfiguration_GetBool_Call {
	return &MockConfiguration_GetBool_Call{Call: _e.mock.On("GetBool", key)}
}

func (_c *MockConfiguration_GetBool_Call) Run(run func(key string)) *MockConfiguration_GetBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfiguration_GetBool_Call) Return(b bool, err error) *MockConfiguration_GetBool_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockConfiguration_GetBool_Call) RunAndReturn(run func(key string) (bool, error)) *MockConfiguration_GetBool_Call {
	_c.Call.Return(run)
	return _c
}

// GetBoolDefault provides a mock function for the type MockConfiguration
func (_mock *MockConfiguration) GetBoolDefault(key string, defaultValue bool) bool {
	ret := _mock.Called(key, defaultValue)

	if len(ret) == 0 {
		panic("no return value specified for GetBoolDefault")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string, bool) bool); ok {
		r0 = returnFunc(key, defaultValue)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockConfiguration_GetBoolDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBoolDefault'
type MockConfiguration_GetBoolDefault_Call struct {
	*mock.Call
}

// GetBoolDefault is a helper method to define mock.On call
//   - key string
//   - defaultValue bool
func (_e *MockConfiguration_Expecter) GetBoolDefault(key interface{}, defaultValue interface{}) *MockConfiguration_GetBoolDefault_Call {
	return &MockConfiguration_GetBoolDefault_Call{Call: _e.mock.On("GetBoolDefault", key, defaultValue)}
}

func (_c *MockConfiguration_GetBoolDefault_Call) Run(run func(key string, defaultValue bool)) *MockConfiguration_GetBoolDefault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 bool
		if args[1] != nil {
			arg1 = args[1].(bool)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfiguration_GetBoolDefault_Call) Return(b bool) *MockConfiguration_GetBoolDefault_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockConfiguration_GetBoolDefault_Call) RunAndReturn(run func(key string, defaultValue bool) bool) *MockConfiguration_GetBoolDefault_Call {
	_c.Call.Return(run)
	return _c
}

// GetDuration provides a mock function for the type MockConfiguration
func (_mock *MockConfiguration) GetDuration(key string) (time.Duration, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetDuration")
	}

	var r0 time.Duration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (time.Duration, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) time.Duration); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfiguration_GetDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDuration'
type MockConfiguration_GetDuration_Call struct {
	*mock.Call
}

// GetDuration is a helper method to define mock.On call
//   - key string
func (_e *MockConfiguration_Expecter) GetDuration(key interface{}) *MockConfiguration_GetDuration_Call {
	return &MockConfiguration_GetDuration_Call{Call: _e.mock.On("GetDuration", key)}
}

func (_c *MockConfiguration_GetDuration_Call) Run(run func(key string)) *MockConfiguration_GetDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfiguration_GetDuration_Call) Return(duration time.Duration, err error) *MockConfiguration_GetDuration_Call {
	_c.Call.Return(duration, err)
	return _c
}

func (_c *MockConfiguration_GetDuration_Call) RunAndReturn(run func(key string) (time.Duration, error)) *MockConfiguration_GetDuration_Call {
	_c.Call.Return(run)
	return _c
}

// GetDurationDefault provides a mock function for the type MockConfiguration
func (_mock *MockConfiguration) GetDurationDefault(key string, defaultValue time.Duration) time.Duration {
	ret := _mock.Called(key, defaultValue)

	if len(ret) == 0 {
		panic("no return value specified for GetDurationDefault")
	}

	var r0 time.Duration
	if returnFunc, ok := ret.Get(0).(func(string, time.Duration) time.Duration); ok {
		r0 = returnFunc(key, defaultValue)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	return r0
}

// MockConfiguration_GetDurationDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDurationDefault'
type MockConfiguration_GetDurationDefault_Call struct {
	*mock.Call
}

// GetDurationDefault is a helper method to define mock.On call
//   - key string
//   - defaultValue time.Duration
func (_e *MockConfiguration_Expecter) GetDurationDefault(key interface{}, defaultValue interface{}) *MockConfiguration_GetDurationDefault_Call {
	return &MockConfiguration_GetDurationDefault_Call{Call: _e.mock.On("GetDurationDefault", key, defaultValue)}
}

func (_c *MockConfiguration_GetDurationDefault_Call) Run(run func(key string, defaultValue time.Duration)) *MockConfiguration_GetDurationDefault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfiguration_GetDurationDefault_Call) Return(duration time.Duration) *MockConfiguration_GetDurationDefault_Call {
	_c.Call.Return(duration)
	return _c
}

func (_c *MockConfiguration_GetDurationDefault_Call) RunAndReturn(run func(key string, defaultValue time.Duration) time.Duration) *MockConfiguration_GetDurationDefault_Call {
	_c.Call.Return(run)
	return _c
}

// GetInt provides a mock function for the type MockConfiguration
func (_mock *MockConfiguration) GetInt(key string) (int, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetInt")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (int, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) int); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfiguration_GetInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInt'
type MockConfiguration_GetInt_Call struct {
	*mock.Call
}

// GetInt is a helper method to define mock.On call
//   - key string
func (_e *MockConfiguration_Expecter) GetInt(key interface{}) *MockConfiguration_GetInt_Call {
	return &MockConfiguration_GetInt_Call{Call: _e.mock.On("GetInt", key)}
}

func (_c *MockConfiguration_GetInt_Call) Run(run func(key string)) *MockConfiguration_GetInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfiguration_GetInt_Call) Return(n int, err error) *MockConfiguration_GetInt_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockConfiguration_GetInt_Call) RunAndReturn(run func(key string) (int, error)) *MockConfiguration_GetInt_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntDefault provides a mock function for the type MockConfiguration
func (_mock *MockConfiguration) GetIntDefault(key string, defaultValue int) int {
	ret := _mock.Called(key, defaultValue)

	if len(ret) == 0 {
		panic("no return value specified for GetIntDefault")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func(string, int) int); ok {
		r0 = returnFunc(key, defaultValue)
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockConfiguration_GetIntDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntDefault'
type MockConfiguration_GetIntDefault_Call struct {
	*mock.Call
}

// GetIntDefault is a helper method to define mock.On call
//   - key string
//   - defaultValue int
func (_e *MockConfiguration_Expecter) GetIntDefault(key interface{}, defaultValue interface{}) *MockConfiguration_GetIntDefault_Call {
	return &MockConfiguration_GetIntDefault_Call{Call: _e.mock.On("GetIntDefault", key, defaultValue)}
}

func (_c *MockConfiguration_GetIntDefault_Call) Run(run func(key string, defaultValue int)) *MockConfiguration_GetIntDefault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfiguration_GetIntDefault_Call) Return(n int) *MockConfiguration_GetIntDefault_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockConfiguration_GetIntDefault_Call) RunAndReturn(run func(key string, defaultValue int) int) *MockConfiguration_GetIntDefault_Call {
	_c.Call.Return(run)
	return _c
}

// GetObject provides a mock function for the type MockConfiguration
func (_mock *MockConfiguration) GetObject(key string, result interface{}) error {
	ret := _mock.Called(key, result)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = returnFunc(key, result)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfiguration_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type MockConfiguration_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
//   - key string
//   - result interface{}
func (_e *MockConfiguration_Expecter) GetObject(key interface{}, result interface{}) *MockConfiguration_GetObject_Call {
	return &MockConfiguration_GetObject_Call{Call: _e.mock.On("GetObject", key, result)}
}

func (_c *MockConfiguration_GetObject_Call) Run(run func(key string, result interface{})) *MockConfiguration_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfiguration_GetObject_Call) Return(err error) *MockConfiguration_GetObject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfiguration_GetObject_Call) RunAndReturn(run func(key string, result interface{}) error) *MockConfiguration_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// GetString provides a mock function for the type MockConfiguration
func (_mock *MockConfiguration) GetString(key string) string {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetString")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockConfiguration_GetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetString'
type MockConfiguration_GetString_Call struct {
	*mock.Call
}

// GetString is a helper method to define mock.On call
//   - key string
func (_e *MockConfiguration_Expecter) GetString(key interface{}) *MockConfiguration_GetString_Call {
	return &MockConfiguration_GetString_Call{Call: _e.mock.On("GetString", key)}
}

func (_c *MockConfiguration_GetString_Call) Run(run func(key string)) *MockConfiguration_GetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfiguration_GetString_Call) Return(s string) *MockConfiguration_GetString_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockConfiguration_GetString_Call) RunAndReturn(run func(key string) string) *MockConfiguration_GetString_Call {
	_c.Call.Return(run)
	return _c
}

// GetStringDefault provides a mock function for the type MockConfiguration
func (_mock *MockConfiguration) GetStringDefault(key string, defaultValue string) string {
	ret := _mock.Called(key, defaultValue)

	if len(ret) == 0 {
		panic("no return value specified for GetStringDefault")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(key, defaultValue)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockConfiguration_GetStringDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringDefault'
type MockConfiguration_GetStringDefault_Call struct {
	*mock.Call
}

// GetStringDefault is a helper method to define mock.On call
//   - key string
//   - defaultValue string
func (_e *MockConfiguration_Expecter) GetStringDefault(key interface{}, defaultValue interface{}) *MockConfiguration_GetStringDefault_Call {
	return &MockConfiguration_GetStringDefault_Call{Call: _e.mock.On("GetStringDefault", key, defaultValue)}
}

func (_c *MockConfiguration_GetStringDefault_Call) Run(run func(key string, defaultValue string)) *MockConfiguration_GetStringDefault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfiguration_GetStringDefault_Call) Return(s string) *MockConfiguration_GetStringDefault_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockConfiguration_GetStringDefault_Call) RunAndReturn(run func(key string, defaultValue string) string) *MockConfiguration_GetStringDefault_Call {
	_c.Call.Return(run)
	return _c
}
