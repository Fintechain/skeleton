// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	component "github.com/fintechain/skeleton/internal/domain/component"
	context "github.com/fintechain/skeleton/internal/domain/context"

	mock "github.com/stretchr/testify/mock"
)

// MockSystem is an autogenerated mock type for the System type
type MockSystem struct {
	mock.Mock
}

type MockSystem_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSystem) EXPECT() *MockSystem_Expecter {
	return &MockSystem_Expecter{mock: &_m.Mock}
}

// ExecuteOperation provides a mock function with given fields: ctx, operationID, input
func (_m *MockSystem) ExecuteOperation(ctx context.Context, operationID component.ComponentID, input component.Input) (component.Output, error) {
	ret := _m.Called(ctx, operationID, input)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteOperation")
	}

	var r0 component.Output
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, component.ComponentID, component.Input) (component.Output, error)); ok {
		return rf(ctx, operationID, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, component.ComponentID, component.Input) component.Output); ok {
		r0 = rf(ctx, operationID, input)
	} else {
		r0 = ret.Get(0).(component.Output)
	}

	if rf, ok := ret.Get(1).(func(context.Context, component.ComponentID, component.Input) error); ok {
		r1 = rf(ctx, operationID, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystem_ExecuteOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteOperation'
type MockSystem_ExecuteOperation_Call struct {
	*mock.Call
}

// ExecuteOperation is a helper method to define mock.On call
//   - ctx context.Context
//   - operationID component.ComponentID
//   - input component.Input
func (_e *MockSystem_Expecter) ExecuteOperation(ctx interface{}, operationID interface{}, input interface{}) *MockSystem_ExecuteOperation_Call {
	return &MockSystem_ExecuteOperation_Call{Call: _e.mock.On("ExecuteOperation", ctx, operationID, input)}
}

func (_c *MockSystem_ExecuteOperation_Call) Run(run func(ctx context.Context, operationID component.ComponentID, input component.Input)) *MockSystem_ExecuteOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(component.ComponentID), args[2].(component.Input))
	})
	return _c
}

func (_c *MockSystem_ExecuteOperation_Call) Return(_a0 component.Output, _a1 error) *MockSystem_ExecuteOperation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystem_ExecuteOperation_Call) RunAndReturn(run func(context.Context, component.ComponentID, component.Input) (component.Output, error)) *MockSystem_ExecuteOperation_Call {
	_c.Call.Return(run)
	return _c
}

// IsRunning provides a mock function with no fields
func (_m *MockSystem) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockSystem_IsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRunning'
type MockSystem_IsRunning_Call struct {
	*mock.Call
}

// IsRunning is a helper method to define mock.On call
func (_e *MockSystem_Expecter) IsRunning() *MockSystem_IsRunning_Call {
	return &MockSystem_IsRunning_Call{Call: _e.mock.On("IsRunning")}
}

func (_c *MockSystem_IsRunning_Call) Run(run func()) *MockSystem_IsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystem_IsRunning_Call) Return(_a0 bool) *MockSystem_IsRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystem_IsRunning_Call) RunAndReturn(run func() bool) *MockSystem_IsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// Registry provides a mock function with no fields
func (_m *MockSystem) Registry() component.Registry {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Registry")
	}

	var r0 component.Registry
	if rf, ok := ret.Get(0).(func() component.Registry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(component.Registry)
		}
	}

	return r0
}

// MockSystem_Registry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Registry'
type MockSystem_Registry_Call struct {
	*mock.Call
}

// Registry is a helper method to define mock.On call
func (_e *MockSystem_Expecter) Registry() *MockSystem_Registry_Call {
	return &MockSystem_Registry_Call{Call: _e.mock.On("Registry")}
}

func (_c *MockSystem_Registry_Call) Run(run func()) *MockSystem_Registry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystem_Registry_Call) Return(_a0 component.Registry) *MockSystem_Registry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystem_Registry_Call) RunAndReturn(run func() component.Registry) *MockSystem_Registry_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockSystem) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystem_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockSystem_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSystem_Expecter) Start(ctx interface{}) *MockSystem_Start_Call {
	return &MockSystem_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockSystem_Start_Call) Run(run func(ctx context.Context)) *MockSystem_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSystem_Start_Call) Return(_a0 error) *MockSystem_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystem_Start_Call) RunAndReturn(run func(context.Context) error) *MockSystem_Start_Call {
	_c.Call.Return(run)
	return _c
}

// StartService provides a mock function with given fields: ctx, serviceID
func (_m *MockSystem) StartService(ctx context.Context, serviceID component.ComponentID) error {
	ret := _m.Called(ctx, serviceID)

	if len(ret) == 0 {
		panic("no return value specified for StartService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, component.ComponentID) error); ok {
		r0 = rf(ctx, serviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystem_StartService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartService'
type MockSystem_StartService_Call struct {
	*mock.Call
}

// StartService is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceID component.ComponentID
func (_e *MockSystem_Expecter) StartService(ctx interface{}, serviceID interface{}) *MockSystem_StartService_Call {
	return &MockSystem_StartService_Call{Call: _e.mock.On("StartService", ctx, serviceID)}
}

func (_c *MockSystem_StartService_Call) Run(run func(ctx context.Context, serviceID component.ComponentID)) *MockSystem_StartService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(component.ComponentID))
	})
	return _c
}

func (_c *MockSystem_StartService_Call) Return(_a0 error) *MockSystem_StartService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystem_StartService_Call) RunAndReturn(run func(context.Context, component.ComponentID) error) *MockSystem_StartService_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx
func (_m *MockSystem) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystem_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockSystem_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSystem_Expecter) Stop(ctx interface{}) *MockSystem_Stop_Call {
	return &MockSystem_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *MockSystem_Stop_Call) Run(run func(ctx context.Context)) *MockSystem_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSystem_Stop_Call) Return(_a0 error) *MockSystem_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystem_Stop_Call) RunAndReturn(run func(context.Context) error) *MockSystem_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// StopService provides a mock function with given fields: ctx, serviceID
func (_m *MockSystem) StopService(ctx context.Context, serviceID component.ComponentID) error {
	ret := _m.Called(ctx, serviceID)

	if len(ret) == 0 {
		panic("no return value specified for StopService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, component.ComponentID) error); ok {
		r0 = rf(ctx, serviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystem_StopService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopService'
type MockSystem_StopService_Call struct {
	*mock.Call
}

// StopService is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceID component.ComponentID
func (_e *MockSystem_Expecter) StopService(ctx interface{}, serviceID interface{}) *MockSystem_StopService_Call {
	return &MockSystem_StopService_Call{Call: _e.mock.On("StopService", ctx, serviceID)}
}

func (_c *MockSystem_StopService_Call) Run(run func(ctx context.Context, serviceID component.ComponentID)) *MockSystem_StopService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(component.ComponentID))
	})
	return _c
}

func (_c *MockSystem_StopService_Call) Return(_a0 error) *MockSystem_StopService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystem_StopService_Call) RunAndReturn(run func(context.Context, component.ComponentID) error) *MockSystem_StopService_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSystem creates a new instance of MockSystem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSystem(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSystem {
	mock := &MockSystem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
