// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	event "github.com/fintechain/skeleton/internal/domain/event"
	mock "github.com/stretchr/testify/mock"
)

// MockEventBus is an autogenerated mock type for the EventBus type
type MockEventBus struct {
	mock.Mock
}

type MockEventBus_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventBus) EXPECT() *MockEventBus_Expecter {
	return &MockEventBus_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: _a0
func (_m *MockEventBus) Publish(_a0 *event.Event) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*event.Event) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventBus_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockEventBus_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - _a0 *event.Event
func (_e *MockEventBus_Expecter) Publish(_a0 interface{}) *MockEventBus_Publish_Call {
	return &MockEventBus_Publish_Call{Call: _e.mock.On("Publish", _a0)}
}

func (_c *MockEventBus_Publish_Call) Run(run func(_a0 *event.Event)) *MockEventBus_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*event.Event))
	})
	return _c
}

func (_c *MockEventBus_Publish_Call) Return(_a0 error) *MockEventBus_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBus_Publish_Call) RunAndReturn(run func(*event.Event) error) *MockEventBus_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// PublishAsync provides a mock function with given fields: _a0
func (_m *MockEventBus) PublishAsync(_a0 *event.Event) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PublishAsync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*event.Event) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventBus_PublishAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishAsync'
type MockEventBus_PublishAsync_Call struct {
	*mock.Call
}

// PublishAsync is a helper method to define mock.On call
//   - _a0 *event.Event
func (_e *MockEventBus_Expecter) PublishAsync(_a0 interface{}) *MockEventBus_PublishAsync_Call {
	return &MockEventBus_PublishAsync_Call{Call: _e.mock.On("PublishAsync", _a0)}
}

func (_c *MockEventBus_PublishAsync_Call) Run(run func(_a0 *event.Event)) *MockEventBus_PublishAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*event.Event))
	})
	return _c
}

func (_c *MockEventBus_PublishAsync_Call) Return(_a0 error) *MockEventBus_PublishAsync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBus_PublishAsync_Call) RunAndReturn(run func(*event.Event) error) *MockEventBus_PublishAsync_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: eventType, handler
func (_m *MockEventBus) Subscribe(eventType string, handler event.EventHandler) event.Subscription {
	ret := _m.Called(eventType, handler)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(string, event.EventHandler) event.Subscription); ok {
		r0 = rf(eventType, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	return r0
}

// MockEventBus_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockEventBus_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - eventType string
//   - handler event.EventHandler
func (_e *MockEventBus_Expecter) Subscribe(eventType interface{}, handler interface{}) *MockEventBus_Subscribe_Call {
	return &MockEventBus_Subscribe_Call{Call: _e.mock.On("Subscribe", eventType, handler)}
}

func (_c *MockEventBus_Subscribe_Call) Run(run func(eventType string, handler event.EventHandler)) *MockEventBus_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(event.EventHandler))
	})
	return _c
}

func (_c *MockEventBus_Subscribe_Call) Return(_a0 event.Subscription) *MockEventBus_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBus_Subscribe_Call) RunAndReturn(run func(string, event.EventHandler) event.Subscription) *MockEventBus_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeAsync provides a mock function with given fields: eventType, handler
func (_m *MockEventBus) SubscribeAsync(eventType string, handler event.EventHandler) event.Subscription {
	ret := _m.Called(eventType, handler)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeAsync")
	}

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(string, event.EventHandler) event.Subscription); ok {
		r0 = rf(eventType, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	return r0
}

// MockEventBus_SubscribeAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeAsync'
type MockEventBus_SubscribeAsync_Call struct {
	*mock.Call
}

// SubscribeAsync is a helper method to define mock.On call
//   - eventType string
//   - handler event.EventHandler
func (_e *MockEventBus_Expecter) SubscribeAsync(eventType interface{}, handler interface{}) *MockEventBus_SubscribeAsync_Call {
	return &MockEventBus_SubscribeAsync_Call{Call: _e.mock.On("SubscribeAsync", eventType, handler)}
}

func (_c *MockEventBus_SubscribeAsync_Call) Run(run func(eventType string, handler event.EventHandler)) *MockEventBus_SubscribeAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(event.EventHandler))
	})
	return _c
}

func (_c *MockEventBus_SubscribeAsync_Call) Return(_a0 event.Subscription) *MockEventBus_SubscribeAsync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBus_SubscribeAsync_Call) RunAndReturn(run func(string, event.EventHandler) event.Subscription) *MockEventBus_SubscribeAsync_Call {
	_c.Call.Return(run)
	return _c
}

// WaitAsync provides a mock function with no fields
func (_m *MockEventBus) WaitAsync() {
	_m.Called()
}

// MockEventBus_WaitAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitAsync'
type MockEventBus_WaitAsync_Call struct {
	*mock.Call
}

// WaitAsync is a helper method to define mock.On call
func (_e *MockEventBus_Expecter) WaitAsync() *MockEventBus_WaitAsync_Call {
	return &MockEventBus_WaitAsync_Call{Call: _e.mock.On("WaitAsync")}
}

func (_c *MockEventBus_WaitAsync_Call) Run(run func()) *MockEventBus_WaitAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventBus_WaitAsync_Call) Return() *MockEventBus_WaitAsync_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventBus_WaitAsync_Call) RunAndReturn(run func()) *MockEventBus_WaitAsync_Call {
	_c.Run(run)
	return _c
}

// NewMockEventBus creates a new instance of MockEventBus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventBus(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventBus {
	mock := &MockEventBus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
