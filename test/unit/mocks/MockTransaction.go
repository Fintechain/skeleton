// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockTransaction creates a new instance of MockTransaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransaction(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransaction {
	mock := &MockTransaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransaction is an autogenerated mock type for the Transaction type
type MockTransaction struct {
	mock.Mock
}

type MockTransaction_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransaction) EXPECT() *MockTransaction_Expecter {
	return &MockTransaction_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockTransaction
func (_mock *MockTransaction) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransaction_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockTransaction_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockTransaction_Expecter) Close() *MockTransaction_Close_Call {
	return &MockTransaction_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockTransaction_Close_Call) Run(run func()) *MockTransaction_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransaction_Close_Call) Return(err error) *MockTransaction_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransaction_Close_Call) RunAndReturn(run func() error) *MockTransaction_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function for the type MockTransaction
func (_mock *MockTransaction) Commit() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransaction_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockTransaction_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *MockTransaction_Expecter) Commit() *MockTransaction_Commit_Call {
	return &MockTransaction_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *MockTransaction_Commit_Call) Run(run func()) *MockTransaction_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransaction_Commit_Call) Return(err error) *MockTransaction_Commit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransaction_Commit_Call) RunAndReturn(run func() error) *MockTransaction_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockTransaction
func (_mock *MockTransaction) Delete(key []byte) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransaction_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTransaction_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key []byte
func (_e *MockTransaction_Expecter) Delete(key interface{}) *MockTransaction_Delete_Call {
	return &MockTransaction_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *MockTransaction_Delete_Call) Run(run func(key []byte)) *MockTransaction_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransaction_Delete_Call) Return(err error) *MockTransaction_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransaction_Delete_Call) RunAndReturn(run func(key []byte) error) *MockTransaction_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockTransaction
func (_mock *MockTransaction) Get(key []byte) ([]byte, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransaction_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTransaction_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key []byte
func (_e *MockTransaction_Expecter) Get(key interface{}) *MockTransaction_Get_Call {
	return &MockTransaction_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockTransaction_Get_Call) Run(run func(key []byte)) *MockTransaction_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransaction_Get_Call) Return(bytes []byte, err error) *MockTransaction_Get_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockTransaction_Get_Call) RunAndReturn(run func(key []byte) ([]byte, error)) *MockTransaction_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function for the type MockTransaction
func (_mock *MockTransaction) Has(key []byte) (bool, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (bool, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) bool); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransaction_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type MockTransaction_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - key []byte
func (_e *MockTransaction_Expecter) Has(key interface{}) *MockTransaction_Has_Call {
	return &MockTransaction_Has_Call{Call: _e.mock.On("Has", key)}
}

func (_c *MockTransaction_Has_Call) Run(run func(key []byte)) *MockTransaction_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransaction_Has_Call) Return(b bool, err error) *MockTransaction_Has_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockTransaction_Has_Call) RunAndReturn(run func(key []byte) (bool, error)) *MockTransaction_Has_Call {
	_c.Call.Return(run)
	return _c
}

// IsActive provides a mock function for the type MockTransaction
func (_mock *MockTransaction) IsActive() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsActive")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockTransaction_IsActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsActive'
type MockTransaction_IsActive_Call struct {
	*mock.Call
}

// IsActive is a helper method to define mock.On call
func (_e *MockTransaction_Expecter) IsActive() *MockTransaction_IsActive_Call {
	return &MockTransaction_IsActive_Call{Call: _e.mock.On("IsActive")}
}

func (_c *MockTransaction_IsActive_Call) Run(run func()) *MockTransaction_IsActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransaction_IsActive_Call) Return(b bool) *MockTransaction_IsActive_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockTransaction_IsActive_Call) RunAndReturn(run func() bool) *MockTransaction_IsActive_Call {
	_c.Call.Return(run)
	return _c
}

// Iterate provides a mock function for the type MockTransaction
func (_mock *MockTransaction) Iterate(fn func(key []byte, value []byte) bool) error {
	ret := _mock.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for Iterate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(func(key []byte, value []byte) bool) error); ok {
		r0 = returnFunc(fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransaction_Iterate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Iterate'
type MockTransaction_Iterate_Call struct {
	*mock.Call
}

// Iterate is a helper method to define mock.On call
//   - fn func(key []byte, value []byte) bool
func (_e *MockTransaction_Expecter) Iterate(fn interface{}) *MockTransaction_Iterate_Call {
	return &MockTransaction_Iterate_Call{Call: _e.mock.On("Iterate", fn)}
}

func (_c *MockTransaction_Iterate_Call) Run(run func(fn func(key []byte, value []byte) bool)) *MockTransaction_Iterate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 func(key []byte, value []byte) bool
		if args[0] != nil {
			arg0 = args[0].(func(key []byte, value []byte) bool)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransaction_Iterate_Call) Return(err error) *MockTransaction_Iterate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransaction_Iterate_Call) RunAndReturn(run func(fn func(key []byte, value []byte) bool) error) *MockTransaction_Iterate_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockTransaction
func (_mock *MockTransaction) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockTransaction_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockTransaction_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockTransaction_Expecter) Name() *MockTransaction_Name_Call {
	return &MockTransaction_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockTransaction_Name_Call) Run(run func()) *MockTransaction_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransaction_Name_Call) Return(s string) *MockTransaction_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockTransaction_Name_Call) RunAndReturn(run func() string) *MockTransaction_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function for the type MockTransaction
func (_mock *MockTransaction) Path() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockTransaction_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type MockTransaction_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *MockTransaction_Expecter) Path() *MockTransaction_Path_Call {
	return &MockTransaction_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *MockTransaction_Path_Call) Run(run func()) *MockTransaction_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransaction_Path_Call) Return(s string) *MockTransaction_Path_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockTransaction_Path_Call) RunAndReturn(run func() string) *MockTransaction_Path_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type MockTransaction
func (_mock *MockTransaction) Rollback() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransaction_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockTransaction_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
func (_e *MockTransaction_Expecter) Rollback() *MockTransaction_Rollback_Call {
	return &MockTransaction_Rollback_Call{Call: _e.mock.On("Rollback")}
}

func (_c *MockTransaction_Rollback_Call) Run(run func()) *MockTransaction_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransaction_Rollback_Call) Return(err error) *MockTransaction_Rollback_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransaction_Rollback_Call) RunAndReturn(run func() error) *MockTransaction_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockTransaction
func (_mock *MockTransaction) Set(key []byte, value []byte) error {
	ret := _mock.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = returnFunc(key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransaction_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockTransaction_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key []byte
//   - value []byte
func (_e *MockTransaction_Expecter) Set(key interface{}, value interface{}) *MockTransaction_Set_Call {
	return &MockTransaction_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *MockTransaction_Set_Call) Run(run func(key []byte, value []byte)) *MockTransaction_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransaction_Set_Call) Return(err error) *MockTransaction_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransaction_Set_Call) RunAndReturn(run func(key []byte, value []byte) error) *MockTransaction_Set_Call {
	_c.Call.Return(run)
	return _c
}
