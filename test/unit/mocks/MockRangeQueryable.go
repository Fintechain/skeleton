// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockRangeQueryable creates a new instance of MockRangeQueryable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRangeQueryable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRangeQueryable {
	mock := &MockRangeQueryable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRangeQueryable is an autogenerated mock type for the RangeQueryable type
type MockRangeQueryable struct {
	mock.Mock
}

type MockRangeQueryable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRangeQueryable) EXPECT() *MockRangeQueryable_Expecter {
	return &MockRangeQueryable_Expecter{mock: &_m.Mock}
}

// IterateRange provides a mock function for the type MockRangeQueryable
func (_mock *MockRangeQueryable) IterateRange(start []byte, end []byte, ascending bool, fn func(key []byte, value []byte) bool) error {
	ret := _mock.Called(start, end, ascending, fn)

	if len(ret) == 0 {
		panic("no return value specified for IterateRange")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]byte, []byte, bool, func(key []byte, value []byte) bool) error); ok {
		r0 = returnFunc(start, end, ascending, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRangeQueryable_IterateRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IterateRange'
type MockRangeQueryable_IterateRange_Call struct {
	*mock.Call
}

// IterateRange is a helper method to define mock.On call
//   - start []byte
//   - end []byte
//   - ascending bool
//   - fn func(key []byte, value []byte) bool
func (_e *MockRangeQueryable_Expecter) IterateRange(start interface{}, end interface{}, ascending interface{}, fn interface{}) *MockRangeQueryable_IterateRange_Call {
	return &MockRangeQueryable_IterateRange_Call{Call: _e.mock.On("IterateRange", start, end, ascending, fn)}
}

func (_c *MockRangeQueryable_IterateRange_Call) Run(run func(start []byte, end []byte, ascending bool, fn func(key []byte, value []byte) bool)) *MockRangeQueryable_IterateRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		var arg3 func(key []byte, value []byte) bool
		if args[3] != nil {
			arg3 = args[3].(func(key []byte, value []byte) bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRangeQueryable_IterateRange_Call) Return(err error) *MockRangeQueryable_IterateRange_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRangeQueryable_IterateRange_Call) RunAndReturn(run func(start []byte, end []byte, ascending bool, fn func(key []byte, value []byte) bool) error) *MockRangeQueryable_IterateRange_Call {
	_c.Call.Return(run)
	return _c
}

// SupportsRangeQueries provides a mock function for the type MockRangeQueryable
func (_mock *MockRangeQueryable) SupportsRangeQueries() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SupportsRangeQueries")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockRangeQueryable_SupportsRangeQueries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SupportsRangeQueries'
type MockRangeQueryable_SupportsRangeQueries_Call struct {
	*mock.Call
}

// SupportsRangeQueries is a helper method to define mock.On call
func (_e *MockRangeQueryable_Expecter) SupportsRangeQueries() *MockRangeQueryable_SupportsRangeQueries_Call {
	return &MockRangeQueryable_SupportsRangeQueries_Call{Call: _e.mock.On("SupportsRangeQueries")}
}

func (_c *MockRangeQueryable_SupportsRangeQueries_Call) Run(run func()) *MockRangeQueryable_SupportsRangeQueries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRangeQueryable_SupportsRangeQueries_Call) Return(b bool) *MockRangeQueryable_SupportsRangeQueries_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockRangeQueryable_SupportsRangeQueries_Call) RunAndReturn(run func() bool) *MockRangeQueryable_SupportsRangeQueries_Call {
	_c.Call.Return(run)
	return _c
}
