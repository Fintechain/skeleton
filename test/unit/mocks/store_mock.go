// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockStore) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockStore_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockStore_Expecter) Close() *MockStore_Close_Call {
	return &MockStore_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockStore_Close_Call) Run(run func()) *MockStore_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_Close_Call) Return(_a0 error) *MockStore_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_Close_Call) RunAndReturn(run func() error) *MockStore_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: key
func (_m *MockStore) Delete(key []byte) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key []byte
func (_e *MockStore_Expecter) Delete(key interface{}) *MockStore_Delete_Call {
	return &MockStore_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *MockStore_Delete_Call) Run(run func(key []byte)) *MockStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockStore_Delete_Call) Return(_a0 error) *MockStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_Delete_Call) RunAndReturn(run func([]byte) error) *MockStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockStore) Get(key []byte) ([]byte, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key []byte
func (_e *MockStore_Expecter) Get(key interface{}) *MockStore_Get_Call {
	return &MockStore_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockStore_Get_Call) Run(run func(key []byte)) *MockStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockStore_Get_Call) Return(_a0 []byte, _a1 error) *MockStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_Get_Call) RunAndReturn(run func([]byte) ([]byte, error)) *MockStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function with given fields: key
func (_m *MockStore) Has(key []byte) (bool, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (bool, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func([]byte) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type MockStore_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - key []byte
func (_e *MockStore_Expecter) Has(key interface{}) *MockStore_Has_Call {
	return &MockStore_Has_Call{Call: _e.mock.On("Has", key)}
}

func (_c *MockStore_Has_Call) Run(run func(key []byte)) *MockStore_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockStore_Has_Call) Return(_a0 bool, _a1 error) *MockStore_Has_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_Has_Call) RunAndReturn(run func([]byte) (bool, error)) *MockStore_Has_Call {
	_c.Call.Return(run)
	return _c
}

// Iterate provides a mock function with given fields: fn
func (_m *MockStore) Iterate(fn func([]byte, []byte) bool) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for Iterate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func([]byte, []byte) bool) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_Iterate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Iterate'
type MockStore_Iterate_Call struct {
	*mock.Call
}

// Iterate is a helper method to define mock.On call
//   - fn func([]byte , []byte) bool
func (_e *MockStore_Expecter) Iterate(fn interface{}) *MockStore_Iterate_Call {
	return &MockStore_Iterate_Call{Call: _e.mock.On("Iterate", fn)}
}

func (_c *MockStore_Iterate_Call) Run(run func(fn func([]byte, []byte) bool)) *MockStore_Iterate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func([]byte, []byte) bool))
	})
	return _c
}

func (_c *MockStore_Iterate_Call) Return(_a0 error) *MockStore_Iterate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_Iterate_Call) RunAndReturn(run func(func([]byte, []byte) bool) error) *MockStore_Iterate_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockStore) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockStore_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockStore_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockStore_Expecter) Name() *MockStore_Name_Call {
	return &MockStore_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockStore_Name_Call) Run(run func()) *MockStore_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_Name_Call) Return(_a0 string) *MockStore_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_Name_Call) RunAndReturn(run func() string) *MockStore_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function with no fields
func (_m *MockStore) Path() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockStore_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type MockStore_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *MockStore_Expecter) Path() *MockStore_Path_Call {
	return &MockStore_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *MockStore_Path_Call) Run(run func()) *MockStore_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_Path_Call) Return(_a0 string) *MockStore_Path_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_Path_Call) RunAndReturn(run func() string) *MockStore_Path_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value
func (_m *MockStore) Set(key []byte, value []byte) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockStore_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key []byte
//   - value []byte
func (_e *MockStore_Expecter) Set(key interface{}, value interface{}) *MockStore_Set_Call {
	return &MockStore_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *MockStore_Set_Call) Run(run func(key []byte, value []byte)) *MockStore_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte))
	})
	return _c
}

func (_c *MockStore_Set_Call) Return(_a0 error) *MockStore_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_Set_Call) RunAndReturn(run func([]byte, []byte) error) *MockStore_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
