// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockConfigurationSource creates a new instance of MockConfigurationSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigurationSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigurationSource {
	mock := &MockConfigurationSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigurationSource is an autogenerated mock type for the ConfigurationSource type
type MockConfigurationSource struct {
	mock.Mock
}

type MockConfigurationSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigurationSource) EXPECT() *MockConfigurationSource_Expecter {
	return &MockConfigurationSource_Expecter{mock: &_m.Mock}
}

// GetValue provides a mock function for the type MockConfigurationSource
func (_mock *MockConfigurationSource) GetValue(key string) (interface{}, bool) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetValue")
	}

	var r0 interface{}
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(string) (interface{}, bool)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) bool); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockConfigurationSource_GetValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValue'
type MockConfigurationSource_GetValue_Call struct {
	*mock.Call
}

// GetValue is a helper method to define mock.On call
//   - key string
func (_e *MockConfigurationSource_Expecter) GetValue(key interface{}) *MockConfigurationSource_GetValue_Call {
	return &MockConfigurationSource_GetValue_Call{Call: _e.mock.On("GetValue", key)}
}

func (_c *MockConfigurationSource_GetValue_Call) Run(run func(key string)) *MockConfigurationSource_GetValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigurationSource_GetValue_Call) Return(ifaceVal interface{}, b bool) *MockConfigurationSource_GetValue_Call {
	_c.Call.Return(ifaceVal, b)
	return _c
}

func (_c *MockConfigurationSource_GetValue_Call) RunAndReturn(run func(key string) (interface{}, bool)) *MockConfigurationSource_GetValue_Call {
	_c.Call.Return(run)
	return _c
}

// LoadConfig provides a mock function for the type MockConfigurationSource
func (_mock *MockConfigurationSource) LoadConfig() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadConfig")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfigurationSource_LoadConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadConfig'
type MockConfigurationSource_LoadConfig_Call struct {
	*mock.Call
}

// LoadConfig is a helper method to define mock.On call
func (_e *MockConfigurationSource_Expecter) LoadConfig() *MockConfigurationSource_LoadConfig_Call {
	return &MockConfigurationSource_LoadConfig_Call{Call: _e.mock.On("LoadConfig")}
}

func (_c *MockConfigurationSource_LoadConfig_Call) Run(run func()) *MockConfigurationSource_LoadConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigurationSource_LoadConfig_Call) Return(err error) *MockConfigurationSource_LoadConfig_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfigurationSource_LoadConfig_Call) RunAndReturn(run func() error) *MockConfigurationSource_LoadConfig_Call {
	_c.Call.Return(run)
	return _c
}
