// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/fintechain/skeleton/internal/domain/component"
	"github.com/fintechain/skeleton/internal/domain/context"
	"github.com/fintechain/skeleton/internal/domain/plugin"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPlugin creates a new instance of MockPlugin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlugin(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlugin {
	mock := &MockPlugin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPlugin is an autogenerated mock type for the Plugin type
type MockPlugin struct {
	mock.Mock
}

type MockPlugin_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPlugin) EXPECT() *MockPlugin_Expecter {
	return &MockPlugin_Expecter{mock: &_m.Mock}
}

// Author provides a mock function for the type MockPlugin
func (_mock *MockPlugin) Author() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Author")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPlugin_Author_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Author'
type MockPlugin_Author_Call struct {
	*mock.Call
}

// Author is a helper method to define mock.On call
func (_e *MockPlugin_Expecter) Author() *MockPlugin_Author_Call {
	return &MockPlugin_Author_Call{Call: _e.mock.On("Author")}
}

func (_c *MockPlugin_Author_Call) Run(run func()) *MockPlugin_Author_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlugin_Author_Call) Return(s string) *MockPlugin_Author_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPlugin_Author_Call) RunAndReturn(run func() string) *MockPlugin_Author_Call {
	_c.Call.Return(run)
	return _c
}

// Description provides a mock function for the type MockPlugin
func (_mock *MockPlugin) Description() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Description")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPlugin_Description_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Description'
type MockPlugin_Description_Call struct {
	*mock.Call
}

// Description is a helper method to define mock.On call
func (_e *MockPlugin_Expecter) Description() *MockPlugin_Description_Call {
	return &MockPlugin_Description_Call{Call: _e.mock.On("Description")}
}

func (_c *MockPlugin_Description_Call) Run(run func()) *MockPlugin_Description_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlugin_Description_Call) Return(s string) *MockPlugin_Description_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPlugin_Description_Call) RunAndReturn(run func() string) *MockPlugin_Description_Call {
	_c.Call.Return(run)
	return _c
}

// Dispose provides a mock function for the type MockPlugin
func (_mock *MockPlugin) Dispose() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dispose")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPlugin_Dispose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dispose'
type MockPlugin_Dispose_Call struct {
	*mock.Call
}

// Dispose is a helper method to define mock.On call
func (_e *MockPlugin_Expecter) Dispose() *MockPlugin_Dispose_Call {
	return &MockPlugin_Dispose_Call{Call: _e.mock.On("Dispose")}
}

func (_c *MockPlugin_Dispose_Call) Run(run func()) *MockPlugin_Dispose_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlugin_Dispose_Call) Return(err error) *MockPlugin_Dispose_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPlugin_Dispose_Call) RunAndReturn(run func() error) *MockPlugin_Dispose_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function for the type MockPlugin
func (_mock *MockPlugin) ID() component.ComponentID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 component.ComponentID
	if returnFunc, ok := ret.Get(0).(func() component.ComponentID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(component.ComponentID)
	}
	return r0
}

// MockPlugin_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockPlugin_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockPlugin_Expecter) ID() *MockPlugin_ID_Call {
	return &MockPlugin_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockPlugin_ID_Call) Run(run func()) *MockPlugin_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlugin_ID_Call) Return(componentID component.ComponentID) *MockPlugin_ID_Call {
	_c.Call.Return(componentID)
	return _c
}

func (_c *MockPlugin_ID_Call) RunAndReturn(run func() component.ComponentID) *MockPlugin_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function for the type MockPlugin
func (_mock *MockPlugin) Initialize(ctx context.Context, system component.System) error {
	ret := _mock.Called(ctx, system)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, component.System) error); ok {
		r0 = returnFunc(ctx, system)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPlugin_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockPlugin_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - ctx context.Context
//   - system component.System
func (_e *MockPlugin_Expecter) Initialize(ctx interface{}, system interface{}) *MockPlugin_Initialize_Call {
	return &MockPlugin_Initialize_Call{Call: _e.mock.On("Initialize", ctx, system)}
}

func (_c *MockPlugin_Initialize_Call) Run(run func(ctx context.Context, system component.System)) *MockPlugin_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 component.System
		if args[1] != nil {
			arg1 = args[1].(component.System)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPlugin_Initialize_Call) Return(err error) *MockPlugin_Initialize_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPlugin_Initialize_Call) RunAndReturn(run func(ctx context.Context, system component.System) error) *MockPlugin_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// IsRunning provides a mock function for the type MockPlugin
func (_mock *MockPlugin) IsRunning() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockPlugin_IsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRunning'
type MockPlugin_IsRunning_Call struct {
	*mock.Call
}

// IsRunning is a helper method to define mock.On call
func (_e *MockPlugin_Expecter) IsRunning() *MockPlugin_IsRunning_Call {
	return &MockPlugin_IsRunning_Call{Call: _e.mock.On("IsRunning")}
}

func (_c *MockPlugin_IsRunning_Call) Run(run func()) *MockPlugin_IsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlugin_IsRunning_Call) Return(b bool) *MockPlugin_IsRunning_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockPlugin_IsRunning_Call) RunAndReturn(run func() bool) *MockPlugin_IsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// Metadata provides a mock function for the type MockPlugin
func (_mock *MockPlugin) Metadata() component.Metadata {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Metadata")
	}

	var r0 component.Metadata
	if returnFunc, ok := ret.Get(0).(func() component.Metadata); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(component.Metadata)
		}
	}
	return r0
}

// MockPlugin_Metadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Metadata'
type MockPlugin_Metadata_Call struct {
	*mock.Call
}

// Metadata is a helper method to define mock.On call
func (_e *MockPlugin_Expecter) Metadata() *MockPlugin_Metadata_Call {
	return &MockPlugin_Metadata_Call{Call: _e.mock.On("Metadata")}
}

func (_c *MockPlugin_Metadata_Call) Run(run func()) *MockPlugin_Metadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlugin_Metadata_Call) Return(metadata component.Metadata) *MockPlugin_Metadata_Call {
	_c.Call.Return(metadata)
	return _c
}

func (_c *MockPlugin_Metadata_Call) RunAndReturn(run func() component.Metadata) *MockPlugin_Metadata_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockPlugin
func (_mock *MockPlugin) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPlugin_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockPlugin_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockPlugin_Expecter) Name() *MockPlugin_Name_Call {
	return &MockPlugin_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockPlugin_Name_Call) Run(run func()) *MockPlugin_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlugin_Name_Call) Return(s string) *MockPlugin_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPlugin_Name_Call) RunAndReturn(run func() string) *MockPlugin_Name_Call {
	_c.Call.Return(run)
	return _c
}

// PluginType provides a mock function for the type MockPlugin
func (_mock *MockPlugin) PluginType() plugin.PluginType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PluginType")
	}

	var r0 plugin.PluginType
	if returnFunc, ok := ret.Get(0).(func() plugin.PluginType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(plugin.PluginType)
	}
	return r0
}

// MockPlugin_PluginType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PluginType'
type MockPlugin_PluginType_Call struct {
	*mock.Call
}

// PluginType is a helper method to define mock.On call
func (_e *MockPlugin_Expecter) PluginType() *MockPlugin_PluginType_Call {
	return &MockPlugin_PluginType_Call{Call: _e.mock.On("PluginType")}
}

func (_c *MockPlugin_PluginType_Call) Run(run func()) *MockPlugin_PluginType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlugin_PluginType_Call) Return(pluginType plugin.PluginType) *MockPlugin_PluginType_Call {
	_c.Call.Return(pluginType)
	return _c
}

func (_c *MockPlugin_PluginType_Call) RunAndReturn(run func() plugin.PluginType) *MockPlugin_PluginType_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockPlugin
func (_mock *MockPlugin) Start(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPlugin_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockPlugin_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPlugin_Expecter) Start(ctx interface{}) *MockPlugin_Start_Call {
	return &MockPlugin_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockPlugin_Start_Call) Run(run func(ctx context.Context)) *MockPlugin_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPlugin_Start_Call) Return(err error) *MockPlugin_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPlugin_Start_Call) RunAndReturn(run func(ctx context.Context) error) *MockPlugin_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function for the type MockPlugin
func (_mock *MockPlugin) Status() component.ServiceStatus {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 component.ServiceStatus
	if returnFunc, ok := ret.Get(0).(func() component.ServiceStatus); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(component.ServiceStatus)
	}
	return r0
}

// MockPlugin_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockPlugin_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *MockPlugin_Expecter) Status() *MockPlugin_Status_Call {
	return &MockPlugin_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *MockPlugin_Status_Call) Run(run func()) *MockPlugin_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlugin_Status_Call) Return(serviceStatus component.ServiceStatus) *MockPlugin_Status_Call {
	_c.Call.Return(serviceStatus)
	return _c
}

func (_c *MockPlugin_Status_Call) RunAndReturn(run func() component.ServiceStatus) *MockPlugin_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockPlugin
func (_mock *MockPlugin) Stop(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPlugin_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockPlugin_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPlugin_Expecter) Stop(ctx interface{}) *MockPlugin_Stop_Call {
	return &MockPlugin_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *MockPlugin_Stop_Call) Run(run func(ctx context.Context)) *MockPlugin_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPlugin_Stop_Call) Return(err error) *MockPlugin_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPlugin_Stop_Call) RunAndReturn(run func(ctx context.Context) error) *MockPlugin_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function for the type MockPlugin
func (_mock *MockPlugin) Type() component.ComponentType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 component.ComponentType
	if returnFunc, ok := ret.Get(0).(func() component.ComponentType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(component.ComponentType)
	}
	return r0
}

// MockPlugin_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockPlugin_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockPlugin_Expecter) Type() *MockPlugin_Type_Call {
	return &MockPlugin_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockPlugin_Type_Call) Run(run func()) *MockPlugin_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlugin_Type_Call) Return(componentType component.ComponentType) *MockPlugin_Type_Call {
	_c.Call.Return(componentType)
	return _c
}

func (_c *MockPlugin_Type_Call) RunAndReturn(run func() component.ComponentType) *MockPlugin_Type_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function for the type MockPlugin
func (_mock *MockPlugin) Version() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPlugin_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockPlugin_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *MockPlugin_Expecter) Version() *MockPlugin_Version_Call {
	return &MockPlugin_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *MockPlugin_Version_Call) Run(run func()) *MockPlugin_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlugin_Version_Call) Return(s string) *MockPlugin_Version_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPlugin_Version_Call) RunAndReturn(run func() string) *MockPlugin_Version_Call {
	_c.Call.Return(run)
	return _c
}
