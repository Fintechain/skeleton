// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	storage "github.com/fintechain/skeleton/internal/domain/storage"
	mock "github.com/stretchr/testify/mock"
)

// MockStoreConfig is an autogenerated mock type for the StoreConfig type
type MockStoreConfig struct {
	mock.Mock
}

type MockStoreConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStoreConfig) EXPECT() *MockStoreConfig_Expecter {
	return &MockStoreConfig_Expecter{mock: &_m.Mock}
}

// GetEngine provides a mock function with no fields
func (_m *MockStoreConfig) GetEngine() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEngine")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockStoreConfig_GetEngine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEngine'
type MockStoreConfig_GetEngine_Call struct {
	*mock.Call
}

// GetEngine is a helper method to define mock.On call
func (_e *MockStoreConfig_Expecter) GetEngine() *MockStoreConfig_GetEngine_Call {
	return &MockStoreConfig_GetEngine_Call{Call: _e.mock.On("GetEngine")}
}

func (_c *MockStoreConfig_GetEngine_Call) Run(run func()) *MockStoreConfig_GetEngine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStoreConfig_GetEngine_Call) Return(_a0 string) *MockStoreConfig_GetEngine_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStoreConfig_GetEngine_Call) RunAndReturn(run func() string) *MockStoreConfig_GetEngine_Call {
	_c.Call.Return(run)
	return _c
}

// GetOptions provides a mock function with no fields
func (_m *MockStoreConfig) GetOptions() storage.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOptions")
	}

	var r0 storage.Config
	if rf, ok := ret.Get(0).(func() storage.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Config)
		}
	}

	return r0
}

// MockStoreConfig_GetOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOptions'
type MockStoreConfig_GetOptions_Call struct {
	*mock.Call
}

// GetOptions is a helper method to define mock.On call
func (_e *MockStoreConfig_Expecter) GetOptions() *MockStoreConfig_GetOptions_Call {
	return &MockStoreConfig_GetOptions_Call{Call: _e.mock.On("GetOptions")}
}

func (_c *MockStoreConfig_GetOptions_Call) Run(run func()) *MockStoreConfig_GetOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStoreConfig_GetOptions_Call) Return(_a0 storage.Config) *MockStoreConfig_GetOptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStoreConfig_GetOptions_Call) RunAndReturn(run func() storage.Config) *MockStoreConfig_GetOptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetPath provides a mock function with no fields
func (_m *MockStoreConfig) GetPath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockStoreConfig_GetPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPath'
type MockStoreConfig_GetPath_Call struct {
	*mock.Call
}

// GetPath is a helper method to define mock.On call
func (_e *MockStoreConfig_Expecter) GetPath() *MockStoreConfig_GetPath_Call {
	return &MockStoreConfig_GetPath_Call{Call: _e.mock.On("GetPath")}
}

func (_c *MockStoreConfig_GetPath_Call) Run(run func()) *MockStoreConfig_GetPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStoreConfig_GetPath_Call) Return(_a0 string) *MockStoreConfig_GetPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStoreConfig_GetPath_Call) RunAndReturn(run func() string) *MockStoreConfig_GetPath_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStoreConfig creates a new instance of MockStoreConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStoreConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStoreConfig {
	mock := &MockStoreConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
